Page 1:
A Comprehensive Overview of Large Language Models
Humza Naveeda, Asad Ullah Khanb,∗, Shi Qiuc,∗, Muhammad Saqibd,e,∗, Saeed Anwarf,g, Muhammad Usmanf,g, Naveed Akhtarh,j,
aThe University of Sydney, Sydney, Australia
bUniversity of Engineering and Technology (UET), Lahore, Pakistan
cThe Chinese University of Hong Kong (CUHK), HKSAR, China
dUniversity of Technology Sydney (UTS), Sydney, Australia
eCommonwealth Scientific and Industrial Research Organisation (CSIRO), Sydney, Australia
fKing Fahd University of Petroleum and Minerals (KFUPM), Dhahran, Saudi Arabia
gSDAIA-KFUPM Joint Research Center for Artificial Intelligence (JRCAI), Dhahran, Saudi Arabia
hThe University of Melbourne (UoM), Melbourne, Australia
iAustralian National University (ANU), Canberra, Australia
jThe University of Western Australia (UWA), Perth, Australia
Large Language Models (LLMs) have recently demonstrated remarkable capabilities in natural language processing tasks and
beyond. This success of LLMs has led to a large influx of research contributions in this direction. These works encompass diverse
topics such as architectural innovations, better training strategies, context length improvements, fine-tuning, multi-modal LLMs,
robotics, datasets, benchmarking, efficiency, and more. With the rapid development of techniques and regular breakthroughs in
LLM research, it has become considerably challenging to perceive the bigger picture of the advances in this direction. Considering
the rapidly emerging plethora of literature on LLMs, it is imperative that the research community is able to benefit from a concise
yet comprehensive overview of the recent developments in this field. This article provides an overview of the literature on a broad
range of LLM-related concepts. Our self-contained comprehensive overview of LLMs discusses relevant background concepts
along with covering the advanced topics at the frontier of research in LLMs. This review article is intended to provide not only a
systematic survey but also a quick, comprehensive reference for the researchers and practitioners to draw insights from extensive,
informative summaries of the existing works to advance the LLM research.
Large Language Models, LLMs, chatGPT, Augmented LLMs, Multimodal LLMs, LLM training, LLM Benchmarking
Language plays a fundamental role in facilitating commu-
nication and self-expression for humans and their interaction
with machines. The need for generalized models stems from
the growing demand for machines to handle complex language
tasks, including translation, summarization, information re-
trieval, conversational interactions, etc. Recently, significant
breakthroughs have been witnessed in language models, pri-
marily attributed to transformers [1], increased computational
capabilities, and the availability of large-scale training data.
These developments have brought about a revolutionary trans-
formation by enabling the creation of LLMs that can approxi-
mate human-level performance on various tasks [2, 3]. Large
Email addresses: humza_naveed@yahoo.com (Humza Naveed),
aukhanee@gmail.com (Asad Ullah Khan), shiqiu@cse.cuhk.edu.hk (Shi
Figure 1: The trend of papers released over the years containing keywords
"Large Language Model", "Large Language Model + Fine-Tuning", and "Large
arXiv:2307.06435v10  [cs.CL]  17 Oct 2024
Page 2:
Figure 2: Chronological display of LLM releases: blue cards represent ‘pre-trained’ models, while orange cards correspond to ‘instruction-tuned’ models. Models
on the upper half signify open-source availability, whereas those on the bottom are closed-source. The chart illustrates the increasing trend towards instruction-tuned
and open-source models, highlighting the evolving landscape and trends in natural language processing research.
Language Models (LLMs) have emerged as cutting-edge arti-
ficial intelligence systems that can process and generate text
with coherent communication [4] and generalize to multiple
The historical progress in natural language processing (NLP)
evolved from statistical to neural language modeling and then
from pre-trained language models (PLMs) to LLMs.
conventional language modeling (LM) trains task-specific mod-
els in supervised settings, PLMs are trained in a self-supervised
setting on a large corpus of text [7, 8, 9] with the aim of learning
a generic representation that is shareable among various NLP
tasks. After fine-tuning for downstream tasks, PLMs surpass
the performance gains of traditional language modeling (LM).
The larger PLMs bring more performance gains, which has led
to the transitioning of PLMs to LLMs by significantly increas-
ing model parameters (tens to hundreds of billions) [10] and
training dataset (many GBs and TBs) [10, 11]. Following this
development, numerous LLMs have been proposed in the lit-
erature [10, 11, 12, 6, 13, 14, 15]. An increasing trend in the
number of released LLMs and names of a few significant LLMs
proposed over the years are shown in Fig 1 and Fig 2, respec-
The early work on LLMs, such as T5 [10] and mT5 [11] em-
ployed transfer learning until GPT-3 [6] showed LLMs are
zero-shot transferable to downstream tasks without fine-tuning.
LLMs accurately respond to task queries when prompted with
task descriptions and examples. However, pre-trained LLMs
fail to follow user intent and perform worse in zero-shot set-
Fine-tuning them with task instruc-
tions data [16, 17, 18, 19] and aligning with human prefer-
ences [20, 21] enhances generalization to unseen tasks, im-
proving zero-shot performance significantly and reducing mis-
In addition to better generalization and domain adaptation,
LLMs appear to have emergent abilities, such as reasoning,
planning, decision-making, in-context learning, answering in
These abilities are known to be ac-
quired by them due to their gigantic scale even when the pre-
trained LLMs are not trained specifically to possess these at-
tributes [22, 23, 24]. Such abilities have led LLMs to be widely
adopted in diverse settings, including multi-modal, robotics,
tool manipulation, question answering, autonomous agents, etc.
Various improvements have also been suggested in these areas
either by task-specific training [25, 26, 27, 28, 29, 30, 31] or
The LLMs abilities to solve diverse tasks with human-level
performance come at the cost of slow training and inference,
extensive hardware requirements, and higher running costs.
Such requirements have limited their adoption and opened up
opportunities to devise better architectures [15, 33, 34, 35]
and training strategies [36, 37, 21, 38, 39, 40, 41].
eter efficient tuning [38, 41, 40], pruning [42, 43], quantiza-
tion [44, 45], knowledge distillation, and context length inter-
polation [46, 47, 48, 49] among others are some of the methods
widely studied for efficient LLM utilization.
Due to the success of LLMs on a wide variety of tasks, the
research literature has recently experienced a large influx of
LLMs literature in surveys [50, 51, 52, 53], and topic-specific
surveys in [54, 55, 56, 57, 58]. In contrast to these surveys, our
contribution focuses on providing a comprehensive yet concise
overview of the general direction of LLM research. This arti-
cle summarizes architectural and training details of pre-trained
LLMs and delves deeper into the details of concepts like fine-
tuning, multi-modal LLMs, augmented LLMs, datasets, eval-
uation, applications, challenges, and others to provide a self-
contained comprehensive overview. Our key contributions are
• We present a survey on the developments in LLM research,
providing a concise, comprehensive overview of the direc-
• We present extensive summaries of pre-trained models that
include fine-grained details of architecture and training de-
• We summarize major findings of the popular contributions
and provide a detailed discussion on the key design and
development aspects of LLMs to help practitioners effec-
• In this self-contained article, we cover a range of con-
cepts to present the general direction of LLMs compre-
hensively, including background, pre-training, fine-tuning,
Page 3:
Figure 3: A broader overview of LLMs, dividing LLMs into seven branches: 1. Pre-Training 2. Fine-Tuning 3. Efficient 4. Inference 5. Evaluation 6. Applications
multi-modal LLMs, augmented LLMs, LLMs-powered
We loosely follow the existing terminology to ensure a stan-
dardized outlook of this research direction. For instance, fol-
lowing [50], our survey discusses pre-trained LLMs with 10B
parameters or more. We refer the readers interested in smaller
pre-trained models to [51, 52, 53].
The organization of this paper is as follows. Section 2 discusses
the background of LLMs. Section 3 focuses on LLMs overview,
architectures, training pipelines and strategies, fine-tuning, and
utilization in different domains. Section 4 highlights the config-
uration and parameters that play a crucial role in the function-
ing of these models. Summary and discussions are presented
in section 3.8. The LLM training and evaluation, datasets, and
benchmarks are discussed in section 5, followed by challenges
and future directions, and conclusion in sections 7 and 8, re-
Page 4:
We provide the relevant background to understand the fun-
damentals related to LLMs in this section. We briefly discuss
necessary components in LLMs and refer the readers interested
in details to the original works.
Tokenization [59] is an essential pre-processing step in
LLM training that parses the text into non-decomposing units
called tokens. Tokens can be characters, subwords [60], sym-
bols [61], or words, depending on the tokenization process.
Some of the commonly used tokenization schemes in LLMs
include wordpiece [62], byte pair encoding (BPE) [61], and un-
igramLM [60]. Readers are encouraged to refer to [63] for a
The transformer processes input sequences in parallel and
ule in the transformer does not capture positional information.
As a result, positional encodings were introduced in trans-
former [64], where a positional embedding vector is added to
the token embedding. Variants of positional embedding include
absolute, relative, or learned positional encodings. Within rel-
ative encoding, Alibi and RoPE are two widely used positional
Alibi [65]: It subtracts a scalar bias from the attention score
that increases with the distance between token positions. This
favors using recent tokens for attention.
RoPE [66]: It rotates query and key representations at an an-
gle proportional to the token absolute position in the input
sequence, resulting in a relative positional encoding scheme
which decays with the distance between the tokens.
Attention assigns weights to input tokens based on impor-
tance so that the model gives more emphasis to relevant tokens.
Attention in transformers [64] calculates query, key, and value
mappings for input sequences, where the attention score is
obtained by multiplying the query and key, and later used to
weight values. We discuss different attention strategies used in
Self-Attention [64]: Calculates attention using queries, keys,
and values from the same block (encoder or decoder).
Cross Attention: It is used in encoder-decoder architectures,
where encoder outputs are the queries, and key-value pairs
Sparse Attention [67]: Self-attention has O(n2) time complex-
ity which becomes infeasible for large sequences. To speed
up the computation, sparse attention [67] iteratively calculates
attention in sliding windows for speed gains.
Flash Attention [68]: Memory access is the major bottleneck
in calculating attention using GPUs.
attention employs input tiling to minimize the memory reads
and writes between the GPU high bandwidth memory (HBM)
The activation functions serve a crucial role in the curve-
fitting abilities of neural networks [69]. We discuss activation
functions used in LLMs in this section.
ReLU [70]: The Rectified linear unit (ReLU) is defined as:
GeLU [71]: The Gaussian Error Linear Unit (GeLU) is the
combination of ReLU, dropout [72] and zoneout [73].
GLU variants [74]: The Gated Linear Unit [75] is a neural
network layer that is an element-wise product (⊗) of a linear
transformation and a sigmoid transformed (σ) linear projection
of the input given as:
GLU(x, W, V, b, c) = (xW + b) ⊗σ(xV + c),
where X is the input of layer and l, W, b, V and c are learned
parameters. Other GLU variants [74] used in LLMs are:
ReGLU(x, W, V, b, c) = max(0, xW + b)⊗,
GEGLU(x, W, V, b, c) = GELU(xW + b) ⊗(xV + c),
S wiGLU(x, W, V, b, c, β) = S wishβ(xW + b) ⊗(xV + c).
Layer normalization leads to faster convergence and is an in-
tegrated component of transformers [64]. In addition to Layer-
Norm [76] and RMSNorm [77], LLMs use pre-layer normal-
ization [78], applying it before multi-head attention (MHA).
Pre-norm is shown to provide training stability in LLMs. An-
other normalization variant, DeepNorm [79] fixes the issue with
This section describes distributed LLM training approaches
briefly. More details are available in [13, 37, 80, 81].
Data Parallelism: Data parallelism replicates the model on
multiple devices where data in a batch gets divided across de-
vices. At the end of each training iteration weights are synchro-
Tensor Parallelism: Tensor parallelism shards a tensor compu-
tation across devices. It is also known as horizontal parallelism
Pipeline Parallelism: Pipeline parallelism shards model layers
across different devices. This is also known as vertical paral-
Model Parallelism: A combination of tensor and pipeline par-
allelism is known as model parallelism.
3D Parallelism: A combination of data, tensor, and model par-
allelism is known as 3D parallelism.
Optimizer Parallelism: Optimizer parallelism also known as
zero redundancy optimizer [37] implements optimizer state
partitioning, gradient partitioning, and parameter partitioning
across devices to reduce memory consumption while keeping
the communication costs as low as possible.
Page 5:
Some commonly used libraries for LLMs training are:
Transformers [82]: The library provides access to various pre-
trained transformer models with APIs to train, fine-tune, infer,
DeepSpeed [36]: A library for scalable distributed training and
inference of deep learning models.
Megatron-LM [80]: It provides GPU-optimized techniques for
JAX [83]: A Python library for high-performance numerical
computing and scaleable machine learning. It can differenti-
ate native Python and NumPy functions and execute them on
Colossal-AI [84]: A collection of components to write dis-
BMTrain [81]: A library to write efficient stand-alone LLMs
Provides API to build mixture-of-experts
MindSpore [86]: A deep learning training and inference frame-
work extendable to mobile, edge, and cloud computing.
PyTorch [87]: A framework developed by Facebook AI Re-
search lab (FAIR) to build deep learning models. The main
features of PyTorch include a dynamic computation graph and
A deep learning framework written by
Google. The key features of TensorFlow are graph-based com-
putation, eager execution, scalability, etc.
MXNet [89]: Apache MXNet is a deep learning framework
with support to write programs in multiple languages, includ-
ing, Python, C++, Scala, R, etc. It also provides support for
dynamic and static computation graphs.
This section briefly summarizes data preprocessing tech-
niques used in LLMs training.
Quality Filtering: For better results, training data quality is
essential. Some approaches to filtering data are: 1) classifier-
train a classifier on high-quality data and predict the quality of
text for filtering, whereas heuristics-based employ some rules
for filtering like language, metrics, statistics, and keywords.
Data Deduplication: Duplicated data can affect model per-
formance and increase data memorization; therefore, to train
LLMs, data deduplication is one of the preprocessing steps.
This can be performed at multiple levels, like sentences,
Privacy Reduction: Most of the training data for LLMs is
information; therefore, many LLMs employ heuristics-based
methods to filter information such as names, addresses, and
phone numbers to avoid learning personal information.
Here we discuss the variants of the transformer architectures
used in LLMs. The difference arises due to the application of
Figure 4: An example of attention patterns in language models, image is taken
Figure 5: An example of language model training objectives, image from [93].
the attention and the connection of transformer blocks. An il-
lustration of attention patterns of these architectures is shown
Encoder Decoder: This architecture processes inputs through
the encoder and passes the intermediate representation to the
decoder to generate the output.
Here, the encoder sees the
complete sequence utilizing self-attention whereas the decoder
processes the sequence one after the other with implementing
Causal Decoder: A type of architecture that does not have an
encoder and processes and generates output using a decoder,
where the predicted token depends only on the previous time
Prefix Decoder: It is also known as a non-causal decoder,
where the attention calculation is not strictly dependent on the
past information and the attention is bidirectional. An example
of a non-causal attention mask is shown in Figure 4.
Mixture-of-Experts: It is a variant of transformer architecture
with parallel independent experts and a router to route tokens
to experts. These experts are feed-forward layers after the at-
tention block [90]. Mixture-of-Experts (MoE) is an efficient
sparse architecture that offers comparable performance to dense
models and allows increasing the model size without increas-
ing the computational cost by activating only a few experts at a
This section describes LLMs pre-training objectives.
more details see the paper [93].
Full Language Modeling: An autoregressive language model-
ing objective where the model is asked to predict future tokens
given the previous tokens, an example is shown in Figure 5.
Prefix Language Modeling: A non-causal training objective,
where a prefix is chosen randomly and only remaining target
tokens are used to calculate the loss. An example is shown in
Page 6:
Figure 6: A basic flow diagram depicting various stages of LLMs from pre-training to prompting/utilization. Prompting LLMs to generate responses is possible at
different training stages like pre-training, instruction-tuning, or alignment tuning. “RL” stands for reinforcement learning, “RM” represents reward-modeling, and
“RLHF” represents reinforcement learning with human feedback.
Masked Language Modeling: In this training objective, tokens
or spans (a sequence of tokens) are masked randomly and the
model is asked to predict masked tokens given the past and
future context. An example is shown in Figure 5.
Unified Language Modeling: Unified language modeling [94]
is a combination of causal, non-causal, and masked language
training objectives. Here in masked language modeling, the
attention is not bidirectional but unidirectional, attending either
Scaling laws study the optimal combination of model param-
eters, dataset size, and computational resources that predict the
improvement in the model performance. It has been shown
that the loss scales according to the power-law with model size,
dataset size, and compute resources [95]. This study suggests
larger models are more important than big data for better perfor-
mance. Another variant of scaling law [96] suggests the model
size and the number of training tokens should be scaled equally.
This section discusses the fundamentals of LLMs adaptation
stages, from pre-training to fine-tuning for downstream tasks
and utilization. An example of different training stages and in-
ference in LLMs is shown in Figure 6. In this paper, we refer
to alignment-tuning as aligning with human preferences, while
occasionally the literature uses the term alignment for different
In the very first stage, the model is trained in a self-
supervised manner on a large corpus to predict the next to-
kens given the input. The design choices of LLMs vary from
encoder-decoder to decoder-only architectures with different
building blocks and loss functions in sections 2.5, 2.4, 2.10.
There are different styles to fine-tune an LLM. This section
Transfer Learning: The pre-trained LLMs perform well for
various tasks [6, 15]. However, to improve the performance for
Page 7:
a downstream task, pre-trained models are fine-tuned with the
task-specific data [10, 11], known as transfer learning.
Instruction-tuning: To enable a model to respond to user
queries effectively, the pre-trained model is fine-tuned on in-
struction formatted data i.e., instruction and an input-output
pair. Instructions generally comprise multi-task data in plain
natural language, guiding the model to respond according to the
prompt and the input. This type of fine-tuning improves zero-
shot generalization and downstream task performance. Details
on formatting instruction data and its various styles are avail-
able in [16, 50, 97].
Alignment-tuning: LLMs are prone to generating false, biased,
and harmful text. To make them helpful, honest, and harmless,
models are aligned using human feedback. Alignment involves
asking LLMs to generate unexpected responses and then updat-
ing their parameters to avoid such responses [20, 21, 98].
It ensures LLMs operate according to human intentions and
values. A model is defined to be an “aligned” model if the
model fulfills three criteria of helpful, honest, and harmless or
Researchers employ reinforcement learning with human feed-
back (RLHF) [100] for model alignment. In RLHF, a fine-tuned
model on demonstrations is further trained with reward model-
ing (RM) and reinforcement learning (RL), shown in Figure 6.
Below we briefly discuss RM and RL pipelines in RLHF.
Reward modeling: trains a model to rank generated responses
according to human preferences using a classification objec-
tive. To train the classifier humans annotate LLMs generated
responses based on the HHH criteria.
Reinforcement learning: in combination with the reward model
is used for alignment in the next stage. The previously trained
reward model ranks LLM-generated responses into preferred
vs. non-preferred, which is used to align the model with proxi-
mal policy optimization (PPO). This process repeats iteratively
Prompting is a method to query trained LLMs for generating
responses, as illustrated in Figure 6. LLMs can be prompted in
various prompt setups, where they can be adapted to the instruc-
tions without fine-tuning and in other cases with fine-tuning on
data containing different prompt styles [16, 101, 102]. A good
guide on prompt engineering is available at [32]. Below, we
will discuss various widely used prompt setups.
Zero-Shot Prompting: LLMs are zero-shot learners and ca-
pable of answering queries never seen before. This style of
prompting requires LLMs to answer user questions without see-
ing any examples in the prompt.
In-context Learning: Also known as few-shot learning, here,
multiple input-output demonstration pairs are shown to the
model to generate the desired response. This adaptation style
is also called few-shot learning. A discussion on formatting in-
context learning (ICL) templates is available in [54, 50, 18, 16].
Reasoning in LLMs: LLMs are zero-shot reasoners and can
be provoked to generate answers to logical problems, task
planning, critical thinking, etc. with reasoning.
reasons is possible only by using different prompting styles,
whereas to improve LLMs further on reasoning tasks many
methods [16, 97] train them on reasoning datasets. We discuss
various prompting techniques for reasoning below.
Chain-of-Thought (CoT): A special case of prompting where
demonstrations contain reasoning information aggregated with
inputs and outputs so that the model generates outcomes with
step-by-step reasoning. More details on CoT prompts are avail-
able in [55, 103, 101].
Improves CoT performance by generat-
ing multiple responses and selecting the most frequent an-
Tree-of-Thought (ToT): Explores multiple reasoning paths
with possibilities to look ahead and backtrack for problem-
Single-Turn Instructions: In this prompting setup, LLMs are
queried only once with all the relevant information in the
prompt. LLMs generate responses by understanding the con-
text either in a zero-shot or few-shot setting.
Multi-Turn Instructions: Solving a complex task requires mul-
tiple interactions with LLMs, where feedback and responses
from the other tools are given as input to the LLM for the next
rounds. This style of using LLMs in the loop is common in
This section reviews LLMs, briefly describing their architec-
tures, training objectives, pipelines, datasets, and fine-tuning
Here, we provide summaries of various well-known pre-
trained LLMs with significant discoveries, changing the course
of research and development in NLP. These LLMs have consid-
erably improved the performance in NLU and NLG domains,
and are widely fine-tuned for downstream tasks. Moreover, We
also identify key findings and insights of pre-trained LLMs in
Table 1 and 2 that improve their performance.
T5 [10]: An encoder-decoder model employing a unified text-
to-text training for all NLP problems is shown in Figure 7. T5
places layer normalization outside the residual path in a conven-
tional transformer model [64]. It uses masked language mod-
eling as a pre-training objective where spans (consecutive to-
kens) are replaced with a single mask instead of separate masks
for each token. This type of masking speeds up the training as
it produces shorter sequences. After pre-training, the model is
fine-tuned using adapter layers [106] for downstream tasks.
GPT-3 [6]: The GPT-3 architecture is the same as the GPT-
2 [5] but with dense and sparse attention in transformer layers
similar to the Sparse Transformer [67]. It shows that large mod-
els can train on larger batch sizes with a lower learning rate to
decide the batch size during training, GPT-3 uses the gradient
noise scale as in [107]. Overall, GPT-3 increases model param-
eters to 175B showing that the performance of large language
Page 8:
Figure 7: Unified text-to-text training example, source image from [10].
Figure 8: The image is the article of [108], showing an example of PanGu-α
models improves with the scale and is competitive with the fine-
mT5 [11]: A multilingual T5 model [10] trained on the mC4
dataset with 101 languages. The dataset is extracted from the
public common crawl scrape. The model uses a larger vocab-
ulary size of 250,000 to cover multiple languages. To avoid
over-fitting or under-fitting for a language, mT5 employs a data
sampling procedure to select samples from all languages. The
paper suggests using a small amount of pre-training datasets,
including all languages when fine-tuning for a task using En-
glish language data. This allows the model to generate correct
PanGu-α [108]: An autoregressive model that has a query
layer at the end of standard transformer layers, example shown
in Figure 8, to predict the next token. Its structure is similar to
the transformer layer but with an additional embedding for the
next position in the attention mechanism, given in Eq. 3.
CPM-2 [12]: Cost-efficient Pre-trained language Models
(CPM-2) pre-trains bilingual (English and Chinese) 11B and
198B mixture-of-experts (MoE) models on the WuDaoCor-
pus [109] dataset. The tokenization process removes “_” white
space tokens in the sentencepiece tokenizer. The models are
trained with knowledge inheritance, starting with only the Chi-
nese language in the first stage and then adding English and
Chinese data. This trained model gets duplicated multiple times
to initialize the 198B MoE model. Moreover, to use the model
for downstream tasks, CPM-2 experimented with both com-
plete fine-tuning and prompt fine-tuning as in [40] where only
prompt-related parameters are updated by inserting prompts at
various positions, front, middle, and back. CPM-2 also pro-
poses the INFMOE, a memory-efficient framework with a strat-
egy to dynamically offload parameters to the CPU for inference
at a 100B scale. It overlaps data movement with inference com-
putation for lower inference time.
ERNIE 3.0 [110]: ERNIE 3.0 takes inspiration from multi-
task learning to build a modular architecture using Transformer-
XL [111] as the backbone. The universal representation mod-
ule is shared by all the tasks, which serve as the basic block
for task-specific representation modules, which are all trained
jointly for natural language understanding, natural language
generation, and knowledge extraction. This LLM is primar-
ily focused on the Chinese language. It claims to train on the
largest Chinese text corpora for LLM training, and achieved
state-of-the-art in 54 Chinese NLP tasks.
Jurassic-1 [112]: A pair of auto-regressive language mod-
els, including a 7B-parameter J1-Large model and a 178B-
Jurassic-1 comprise word pieces, complete words, and multi-
word expressions without any word boundaries, where possible
out-of-vocabulary instances are interpreted as Unicode bytes.
Compared to the GPT-3 counterparts, the Jurassic-1 models
apply a more balanced depth-to-width self-attention architec-
ture [113] and an improved tokenizer for a faster prediction
based on broader resources, achieving a comparable perfor-
mance in zero-shot learning tasks and a superior performance in
few-shot learning tasks given the ability to feed more examples
HyperCLOVA [114]: A Korean language model with GPT-3
Yuan 1.0 [115]: Trained on a Chinese corpus with 5TB of
high-quality text collected from the Internet. A Massive Data
Filtering System (MDFS) built on Spark is developed to pro-
cess the raw data via coarse and fine filtering techniques. To
speed up the training of Yuan 1.0 to save energy expenses and
carbon emissions, various factors that improve the performance
of distributed training are incorporated in architecture and train-
ing: like increasing the hidden state size improves pipeline and
tensor parallelism performance, larger micro batches improve
pipeline parallelism performance, and larger global batch size
improve data parallelism performance. In practice, the Yuan 1.0
model performs well on text classification, Winograd Schema,
natural language inference, and reading comprehension tasks.
Gopher [116]: The Gopher family of models ranges from
44M to 280B parameters in size to study the effect of scale
on the LLMs performance. The 280B model beats GPT-3 [6],
Jurrasic-1 [112], MT-NLG [117], and others on 81% of the
ERNIE 3.0 TITAN [35]: ERNIE 3.0 Titan extends ERNIE 3.0
by training a larger model with 26x the number of parameters
of the latter. This bigger model outperformed other state-of-the-
art models in 68 NLP tasks. LLMs produce text with incorrect
facts. In order to have control of the generated text with fac-
tual consistency, ERNIE 3.0 Titan adds another task, Credible
and Controllable Generations, to its multi-task learning setup.
Page 9:
It introduces additional self-supervised adversarial and control-
lable language modeling losses to the pre-training step, which
enables ERNIE 3.0 Titan to beat other LLMs in their manually
selected Factual QA task set evaluations.
GPT-NeoX-20B [118]: An auto-regressive model that largely
follows GPT-3 with a few deviations in architecture design,
trained on the Pile dataset without any data deduplication. GPT-
NeoX has parallel attention and feed-forward layers in a trans-
former block, given in Eq. 4, that increases throughput by 15%.
It uses rotary positional embedding [66], applying it to only
25% of embedding vector dimension as in [119]. This reduces
the computation without performance degradation. As opposed
to GPT-3, which uses dense and sparse layers, GPT-NeoX-20B
uses only dense layers. The hyperparameter tuning at this scale
is difficult; therefore, the model chooses hyperparameters from
the method [6] and interpolates values between 13B and 175B
models for the 20B model. The model training is distributed
among GPUs using both tensor and pipeline parallelism.
x + Attn(LN1(x)) + FF(LN2(x))
OPT [14]: It is a clone of GPT-3, developed to open-source
a model that replicates GPT-3 performance. Training of OPT
employs dynamic loss scaling [120] and restarts from an earlier
checkpoint with a lower learning rate whenever loss divergence
is observed. Overall, the performance of OPT-175B models is
comparable to the GPT3-175B model.
BLOOM [13]: A causal decoder model trained on the ROOTS
corpus to open-source an LLM. The architecture of BLOOM is
shown in Figure 9, with differences like ALiBi positional em-
bedding, an additional normalization layer after the embedding
layer as suggested by the bitsandbytes1 library. These changes
stabilize training with improved downstream performance.
GLaM [91]: Generalist Language Model (GLaM) represents a
family of language models using a sparsely activated decoder-
only mixture-of-experts (MoE) structure [121, 90].
more model capacity while reducing computation, the experts
are sparsely activated where only the best two experts are used
to process each input token. The largest GLaM model, GLaM
(64B/64E), is about 7× larger than GPT-3 [6], while only part of
the parameters are activated per input token. The largest GLaM
(64B/64E) model achieves better overall results as compared
to GPT-3 while consuming only one-third of GPT-3’s training
MT-NLG [117]: A 530B causal decoder based on the GPT-
2 architecture that has roughly 3× GPT-3 model parameters.
MT-NLG is trained on filtered high-quality data collected from
various public datasets and blends various types of datasets in a
single batch, which beats GPT-3 on several evaluations.
Chinchilla [96]: A causal decoder trained on the same dataset
as the Gopher [116] but with a little different data sampling
distribution (sampled from MassiveText). The model architec-
ture is similar to the one used for Gopher, with the exception of
AdamW optimizer instead of Adam. Chinchilla identifies the
Figure 9: The BLOOM architecture example sourced from [13].
relationship that model size should be doubled for every dou-
bling of training tokens. Over 400 language models ranging
from 70 million to over 16 billion parameters on 5 to 500 bil-
lion tokens are trained to get the estimates for compute-optimal
training under a given budget. The authors train a 70B model
with the same compute budget as Gopher (280B) but with 4
times more data. It outperforms Gopher [116], GPT-3 [6], and
others on various downstream tasks, after fine-tuning.
AlexaTM [122]: An encoder-decoder model, where encoder
weights and decoder embeddings are initialized with a pre-
trained encoder to speed up training. The encoder stays frozen
for the initial 100k steps and is later unfrozen for end-to-end
training. The model is trained on a combination of denoising
and causal language modeling (CLM) objectives, concatenat-
ing a [CLM] token at the beginning for mode switching. Dur-
ing training, the CLM task is applied for 20% of the time, which
improves the in-context learning performance.
PaLM [15]: A causal decoder with parallel attention and
feed-forward layers similar to Eq. 4, speeding up training by
a factor of 15. Additional changes to the conventional trans-
former model include SwiGLU activation, RoPE embeddings,
multi-query attention that saves computation cost during decod-
ing, and shared input-output embeddings. During training, loss
spiking was observed, and to fix it, model training was restarted
from a 100-step earlier checkpoint by skipping 200-500 batches
around the spike. Moreover, the model was found to memo-
rize around 2.4% of the training data at the 540B model scale,
whereas this number was lower for smaller models.
PaLM-2 [123]: A smaller multi-lingual variant of PaLM,
trained for larger iterations on a better quality dataset. PaLM-
2 shows significant improvements over PaLM, while reducing
training and inference costs due to its smaller size. To lessen
toxicity and memorization, it appends special tokens with a
fraction of pre-training data, which shows a reduction in gener-
U-PaLM [124]: This method trains PaLM for 0.1% addi-
tional compute with the UL2 (also named as UL2Restore) ob-
jective [125], using the same dataset it outperforms the baseline
significantly on various NLP tasks, including zero-shot, few-
shot, commonsense reasoning, CoT, etc. Training with UL2R
involves converting a causal decoder PaLM to a non-causal de-
coder PaLM and employing 50% sequential denoising, 25%
regular denoising, and 25% extreme denoising loss functions.
Page 10:
UL2 [125]: An encoder-decoder architecture trained using a
mixture of denoisers (MoD) objective. Denoisers include 1)
R-Denoiser: a regular span masking, 2) S-Denoiser: which cor-
rupts consecutive tokens of a large sequence and 3) X-Denoiser:
which corrupts a large number of tokens randomly. During pre-
training, UL2 includes a denoiser token from R, S, X to rep-
resent a denoising setup. It helps improve fine-tuning perfor-
mance for downstream tasks that bind the task to one of the up-
stream training modes. This MoD style of training outperforms
the T5 model on many benchmarks.
GLM-130B [33]: GLM-130B is a bilingual (English and Chi-
nese) model trained using an auto-regressive mask infilling pre-
training objective similar to the GLM [126]. This training style
makes the model bidirectional as compared to GPT-3, which is
unidirectional. As opposed to GLM, the training of GLM-130B
includes a small amount of multi-task instruction pre-training
data (5% of the total data) along with self-supervised mask in-
filling. To stabilize the training, it applies embedding layer gra-
LLaMA [127, 21]: A set of decoder-only language models
varying from 7B to 70B parameters. LLaMA models series is
the most famous among the community for parameter efficiency
LLaMA-1 [127]: Implements efficient causal attention [128]
by not storing and computing masked attention weights and
key/query scores. Another optimization is reducing the number
of activations recomputed in the backward pass, as in [129].
LLaMA-2 [21]: This work is more focused on fine-tuning a
safer and better LLaMA-2-Chat model for dialogue generation.
The pre-trained model has 40% more training data with a larger
context length and grouped-query attention.
LLaMA-3/3.1 [130]: A collection of models trained on a
seven times larger dataset as compared to LLaMA-2 with dou-
ble the context length, outperforming its previous variants and
PanGu-Σ [92]: An autoregressive model with parameters
copied from PanGu-α and extended to a trillion scale with Ran-
dom Routed Experts (RRE), the architectural diagram is shown
in Figure 10. RRE is similar to the MoE architecture, with
distinctions at the second level, where tokens are randomly
routed to experts in a domain instead of using a learnable gat-
ing method. The model has bottom layers densely activated and
shared across all domains, whereas top layers are sparsely ac-
tivated according to the domain. This training style allows for
extracting task-specific models and reduces catastrophic forget-
ting effects in the case of continual learning.
Mixtral8x22b [131]: A mixture-of-experts (MoE) model with
eight distinct experts routes each token to two experts at each
layer and combines the outputs additively.
Snowflake Arctic [132]: Arctic LLM is a hybrid of dense and
mixture-of-experts (MoE) architecture. The MoE (128×3.66B
MLP experts) is parallel to the dense transformer (10B) with
only two experts activated. The model has many experts, com-
pared to other MoE LLMs [131, 133], to increase the model
capacity and provide an opportunity to choose among many ex-
perts for a diverse configuration. The model has 480B param-
eters, and only 17B are active during a forward pass, reducing
Grok [133, 134]: Grok is a family of LLMs including Grok-1
and Grok-1.5, released by XAI.
Grok-1 [133]: Grok-1 is a 314B parameters language MoE
model (eight experts), where two experts are activated per to-
Grok-1.5 [134]: Grok-1.5 is a multi-modal LLM with a larger
context length and improved performance.
Gemini [135, 136]: Gemini replaces Bard (based on PaLM)
with multi-modal capabilities and significant language model-
Gemini-1 [135]: The first-ever auto-regressive model to
achieve human-level capabilities on the MMLU benchmark.
Gemini-1.5 [136]: A multi-modal LLM with MoE architec-
ture builds on the findings of Gemini-1. The model has a 2M
context window and can reason over information up to 10M
tokens. Such large context windows were never achieved pre-
viously and shown to have a huge impact on performance gain.
Nemotron-4 340B [137]: A decoder-only model that has been
aligned on 98% synthetic data and only 2% manually annotated
data. Utilizing synthetic data at a large proportion improves the
model performance significantly. The paper suggested intro-
ducing alignment data with a smaller subset of previously seen
data during the late stage of the model pre-training, enabling the
smooth transition from the pre-trained stage to the final train-
ing stage. To train better instruction-following models, weaker
models are trained into stronger models iteratively. The syn-
thetic data generated by the weaker instruction-tuned model is
used to train a base model which is later supervised fine-tuned
DeepSeek [138]: DeepSeek studies the LLMs scaling laws
in detail to determine the optimal non-embedding model size
and training data. The experiments were performed for 8 bud-
gets ranging from 1e17 to 3e20 training FLOPs. Each compute
budget was tested against ten different models/data scales. The
batch size and learning rates were also fitted for the given com-
pute budget finding that the batch size should increase with
the increased compute budget while decreasing the learning
rate. Following are the equations for the optimal batch-size (B),
learning rate (η), model size (M), and data (D):
Mbase = 0.1715, Dbase = 5.8316, a = 0.5243, b = 0.4757
DeepSeek-v2 [139]: An MoE model that introduces multi-
head latent attention (MLA) to reduce inference costs, by com-
pressing Key-Value (KV) cache into a latent vector.
achieves better performance than multi-head attention (MHA),
and other efficient attention mechanisms such as grouped query
attention (GQA), multi-query attention (MQA), etc. Because
of MLA, DeepSeek-v2 achieves 5.76 times faster inference
throughput as compared to DeepSeek [138].
Page 11:
CodeGen has a similar architecture to
PaLM [15], i.e., parallel attention, MLP layers, and RoPE em-
beddings. The model is trained on both natural language and
programming language data sequentially (trained on the first
dataset, then the second, and so on) on the following datasets
1) PILE, 2) BIGQUERY, and 3) BIGPYTHON. CodeGen pro-
posed a multi-step approach to synthesizing code. The purpose
is to simplify the generation of long sequences where the previ-
ous prompt and generated code are given as input with the next
prompt to generate the next code sequence. CodeGen open-
source a Multi-Turn Programming Benchmark (MTPB) to eval-
Codex [141]: This LLM is trained on a subset of public Python
Github repositories to generate code from docstrings. Com-
puter programming is an iterative process where the programs
are often debugged and updated before fulfilling the require-
ments. Similarly, Codex generates 100 versions of a program
by repetitive sampling for a given description, which produces
a working solution for 77.5% of the problems passing unit tests.
Its powerful version powers Github Copilot2.
AlphaCode [142]: A set of large language models, ranging
from 300M to 41B parameters, designed for competition-level
code generation tasks. It uses the multi-query attention [143] to
reduce memory and cache costs. Since competitive program-
ming problems highly require deep reasoning and an under-
standing of complex natural language algorithms, the Alpha-
Code models are pre-trained on filtered GitHub code in popular
languages and then fine-tuned on a new competitive program-
ming dataset named CodeContests. The CodeContests dataset
mainly contains problems, solutions, and test cases collected
from the Codeforces platform3. The pre-training employs stan-
dard language modeling objectives, while GOLD [144] with
tempering [145] serves as the training objective for the fine-
tuning on CodeContests data. To evaluate the performance of
AlphaCode, simulated programming competitions are hosted
on the Codeforces platform: overall, AlphaCode ranks at the
top 54.3% among over 5000 competitors, where its Codeforces
rating is within the top 28% of recently participated users.
CodeT5+ [34]: CodeT5+ is based on CodeT5 [146], with
shallow encoder and deep decoder, trained in multiple stages
initially unimodal data (code) and later bimodal data (text-code
pairs). Each training stage has different training objectives and
activates different model blocks encoder, decoder, or both ac-
cording to the task. The unimodal pre-training includes span
denoising and CLM objectives, whereas bimodal pre-training
objectives contain contrastive learning, matching, and CLM for
text-code pairs. CodeT5+ adds special tokens with the text to
enable task modes, for example, [CLS ] for contrastive loss,
[Match] for text-code matching, etc.
StarCoder [147]: A decoder-only model with the SantaCoder
architecture, employing Flash attention to scale up the context
length to 8k. The StarCoder trains an encoder to filter names,
emails, and other personal data from the training data. Its fine-
tuned variant outperforms PaLM, LLaMA, and LAMDA on
Galactica [148]: A large curated corpus of human scientific
knowledge with 48 million papers, textbooks, lecture notes,
millions of compounds and proteins, scientific websites, en-
cyclopedias, and more are trained using the metaseq library3,
which is built on PyTorch and fairscale [149]. The model wraps
reasoning datasets with the < work > token to provide step-by-
step reasoning context to the model, which has been shown to
improve the performance on reasoning tasks.
LaMDA [150]: A decoder-only model pre-trained on pub-
lic dialog data, public dialog utterances, and public web doc-
uments, where more than 90% of the pre-training data is in
English. LaMDA is trained with the objective of producing re-
sponses that exhibit high levels of quality, safety, and grounded-
ness. To achieve this, discriminative and generative fine-tuning
techniques are incorporated to enhance the model’s safety and
quality aspects. As a result, the LaMDA models can be utilized
as a general language model performing various tasks.
BloombergGPT [151]: A non-causal decoder model trained
using both financial (“FINPILE” from the Bloomberg archive)
and general-purpose datasets. The model’s architecture is sim-
ilar to the BLOOM [13] and OPT [14]. It allocates 50B param-
eters to different blocks of the model using the approach [113].
For effective training, BloombergGPT packs documents to-
gether with < |endoftext| > to use the maximum sequence
length, uses warmup batch size starting from 1024 to 2048, and
manually reduces the learning rate multiple times during the
Xuan Yuan 2.0 [152]: A Chinese financial chat model with
BLOOM’s [13] architecture trained on a combination of general
purpose, financial, general purpose instructions, and financial
institutions datasets. Xuan Yuan 2.0 combined the pre-training
and fine-tuning stages to avoid catastrophic forgetting.
Pre-trained LLMs have excellent generalization abilities to
unseen tasks. However, because they are generally trained with
the objective of next token prediction, LLMs have limited ca-
pacity to follow user intent and are prone to generate unethical,
toxic or inaccurate responses [20]. For their effective utiliza-
tion, LLMs are fine-tuned to follow instructions [16, 17, 97] and
generate safe responses [20], which also results in increasing
zero-shot, few-shot, and cross-task generalization [97, 16, 18],
with minimal compute increment, e.g., 0.2% of the total pre-
training for PaLM 540B [16].
We review various fine-tuned LLMs and strategies for effective
Page 12:
Table 1: Noteworthy findings and insights of pre-trained Large Language Models.
• Encoder and decoder with shared parameters perform equivalently when parameters are not shared
• Fine-tuning model layers (adapter layers) work better than the conventional way of training on only
• Few-shot performance of LLMs is better than the zero-shot, suggesting that LLMs are meta-
• Large multi-lingual models perform equivalently to single language models on downstream tasks.
However, smaller multi-lingual models perform worse
• LLMs have good few shot capabilities
• Prompt fine-tuning requires updating very few parameters while achieving performance compara-
ble to full model fine-tuning
• Prompt fine-tuning takes more time to converge as compared to full model fine-tuning
• Inserting prompt tokens in-between sentences can allow the model to understand relations between
• In an analysis, CPM-2 finds that prompts work as a provider (additional context) and aggregator
(aggregate information with the input text) for the model
• A modular LLM architecture with a universal representation module and task-specific representa-
tion module helps in the finetuning phase
• Optimizing the parameters of a task-specific representation network during the fine-tuning phase is
an efficient way to take advantage of the powerful pre-trained model
• The performance of LLM is highly related to the network size
• To improve runtime performance, more operations can be performed in parallel (width) rather than
• To efficiently represent and fit more text in the same context length, the model uses a larger vo-
cabulary to train a SentencePiece tokenizer without restricting it to word boundaries. This further
benefits in few-shot learning tasks
• By employing prompt-based tuning, the performances of models can be improved, often surpassing
those of state-of-the-art models when the backward gradients of inputs are accessible
• The model architecture that excels in pre-training and fine-tuning cases may exhibit contrasting
behavior in zero-shot and few-shot learning
• Relative encodings enable the model to evaluate for longer sequences than training.
• Additional self-supervised adversarial loss to distinguish between real and generated text improves
the model performance as compared to ERNIE 3.0
• Parallel attention + FF layers speed-up training 15% with the same performance as with cascaded
• Initializing feed-forward output layers before residuals with scheme in [153] avoids activations
from growing with increasing depth and width
• Training on Pile outperforms GPT-3 on five-shot
Table Continued on Next Page
Page 13:
• Restart training from an earlier checkpoint with a lower learning rate if loss diverges
• Model is prone to generate repetitive text and stuck in a loop
• Galactica’s performance has continued to improve across validation set, in-domain, and out-of-
domain benchmarks, even with multiple repetitions of the corpus, which is superior to existing
• A working memory token approach can achieve strong performance over existing methods on
mathematical MMLU and MATH benchmarks. It sets a new state-of-the-art on several downstream
tasks such as PubMedQA (77.6%) and MedMCQA dev (52.9%)
• The model capacity can be maintained at reduced computation by replacing the feed-forward layer
in each transformer layer with a mixture-of-experts (MoE)
• The model trained on filtered data shows consistently better performances on both NLG and NLU
tasks, where the effect of filtering is more significant on the former tasks
• Filtered pretraining corpora play a crucial role in the generation capability of LLMs, especially for
• The scaling of GLaM MoE models can be achieved by increasing the size or number of experts in
the MoE layer. Given a fixed budget of computation, more experts contribute to a better perfor-
• The model can be fine-tuned to learn to call different external information resources and tools
• For higher effectiveness and efficiency, a transformer model can be asymmetrically constructed
with a shallower encoder and a deeper decoder
• To achieve better performances, it is necessary to employ strategies such as massively scaling
upsampling, followed by the filtering and clustering of samples into a compact set
• The utilization of novel sampling-efficient transformer architectures designed to facilitate large-
• Simplifying problem descriptions can effectively improve the model’s performance
• The model size and the number of training tokens should be scaled proportionately: for each dou-
bling of the model size, the number of training tokens should be doubled as well
• English-centric models produce better translations when translating to English as compared to non-
• Generalized models can have equivalent performance for language translation to specialized small
• Larger models have a higher percentage of training data memorization
• Performance has not yet saturated even at 540B scale, which means larger models are likely to
• Encoder-decoder architecture is more suitable to train LLMs given bidirectional attention to the
• Causal Language Modeling (CLM) task can be added to benefit the model with efficient in-context
• Placing layer norm at the beginning of each transformer layer improves the training stability
Table Continued on Next Page
Page 14:
• Training with a mixture of denoisers outperforms PaLM when trained further for a few more FLOPs
• Training with a mixture of denoisers improves the infilling ability and open-ended text generation
• Mode switching training enables better performance on downstream tasks
• CoT prompting outperforms standard prompting for UL2
• Pre-training data with a small proportion of multi-task instruction data improves the overall model
• Multi-step prompting for code synthesis leads to a better user intent understanding and code gen-
• A constant performance improvement is observed when scaling the model
• Smaller models can achieve good performances with more training data and computing time
• Sparse models provide the benefits of large models at a lower computation cost
• Randomly Routed Experts reduces catastrophic forgetting effects which in turn is essential for
• Randomly Routed Experts allow extracting a domain-specific sub-model in deployment which is
cost-efficient while maintaining a performance similar to the original
• Pre-training with general-purpose and task-specific data improves task performance without hurt-
• Combining pre-training and fine-tuning stages in single training avoids catastrophic forgetting
• Causal LM is crucial for a model’s generation capability in encoder-decoder architectures
• Multiple training objectives like span corruption, Causal LM, matching, etc complement each other
• HHH prompt by Anthropic allows the model to follow instructions without fine-tuning
• Model trained on unfiltered data is more toxic but may perform better on downstream tasks after
• Model trained on unfiltered data requires fewer samples for safety alignment
• Data quality is important to train better models
• Model and data size should be scaled with 1:1 proportions
• Smaller models trained for larger iterations outperform larger models
• Increasing batch size gradually stabilizes the training without loss spikes
• High-quality data at the final stages of training improves the model performance
• Increasing model context length windows step-wise allows it to better adapt to various sequence
• Model aligned iteratively on synthetic data with data generated from the previously aligned model
• Batch size should increase with the increase in compute budget while decreasing the learning rate
• Mult-head latent attention (MLA) performs better than multi-head attention (MHA) while requiring
a significantly smaller KV cache, therefore achieving faster data generation
Page 15:
Table 2: Key insights and findings from the study of instruction-tuned Large Language Models.
• Multi-task prompting enables zero-shot generalization and outperforms baselines
• Even a single prompt per dataset task is enough to improve performance
• To aid the model in effectively filtering and utilizing relevant information, human labelers play a
crucial role in answering questions regarding the usefulness of the retrieved documents
• Interacting a fine-tuned language model with a text-based web-browsing environment can improve
end-to-end retrieval and synthesis via imitation learning and reinforcement learning
• Generating answers with references can make labelers easily judge the factual accuracy of answers
• Instruction tuning leads to a stronger generalization of unseen tasks
• More tasks improve generalization whereas only increasing task instances does not help
• Supervised trained models are better than generalized models
• Models pre-trained with instructions and examples perform well for different types of inputs
• Instruction tuning enables zero-shot generalization to tasks never seen before
• Multi-lingual training leads to even better zero-shot generalization for both English and non-
• Training on machine-translated prompts improves performance for held-out tasks with non-English
• English only fine-tuning on multilingual pre-trained language model is enough to generalize to
• Creating a batch with multiple task examples is important for better performance
• Only example proportional sampling is not enough, training datasets should also be proportional
• Fully held-out and partially supervised tasks performance improves by scaling tasks or categories
whereas fully supervised tasks have no effect
• Including small amounts i.e. 5% of pretraining data during fine-tuning is effective
• Only 1% reasoning data improves the performance, adding more deteriorates performance
• Adding dialogue data makes the performance worse
• Labelers’ judgment and well-defined alignment rules help the model generate better responses
• Good dialogue goals can be broken down into detailed natural language rules for the agent and the
• The combination of reinforcement learning (RL) with reranking yields optimal performance in
terms of preference win rates and resilience against adversarial probing
• Finetuning with CoT improves performance on held-out tasks
• Fine-tuning along with CoT data improves reasoning abilities
• CoT tuning improves zero-shot reasoning
• Performance improves with more tasks
• Instruction fine-tuning improves usability which otherwise is challenging for pre-trained models
• Improving the model’s performance with instruction tuning is compute-efficient
• Multitask prompting enables zero-shot generalization abilities in LLM
• Fine-tuning with re-written instruction-tuning data into a complex set improves performance
• Model learns to write safe responses with fine-tuning on safe demonstrations, while additional
RLHF step further improves model safety and make it less prone to jailbreak attacks
• Less high quality data is enough for fine-tuned model generalization
Page 16:
Figure 10: This example illustrates the PanGu-P architecture, as depicted in
the image sourced from [92].
3.2.1. Instruction-Tuning with Manually Created Datasets
Numerous hand-crafted instruction-tuning datasets with
different design choices are proposed in the literature to
instruction-tune LLMs. The performance of fine-tuned LLMs
depends on multiple factors, such as dataset, instruction diver-
sity, prompting templates, model size, and training objectives.
Keeping this in view, diverse fine-tuned models have emerged
in the literature using manually created datasets.
The models T0 [17] and mT0 (multi-lingual) [154] employ
templates to convert existing datasets into prompt datasets.
They have shown improvements in generalization to zero-shot
and held-out tasks. Tk-Instruct [18] fine-tuned the T5 model
with in-context instructions to study generalization on unseen
tasks when given in-context instructions during test time. The
model outperformed Instruct-GPT, despite being smaller in
size, i.e., 11B parameters as compared to 175B of GPT-3.
Increasing Tasks and Prompt Setups: Zero-shot and few-shot
performance improves significantly by expanding task collec-
tion and prompt styles. OPT-IML [97] and Flan [16] curated
larger 2k and 1.8k task datasets, respectively. While increasing
task size alone is not enough, OPT-IML and Flan add more
prompting setups in their datasets, zero-shot, few-shot, and
CoT. In continuation, CoT Collection [101] fine-tunes Flan-T5
further on 1.88M CoT samples. Another method [102] uses
symbolic tasks with tasks in T0, Flan, etc.
3.2.2. Instruction-Tuning with LLMs Generated Datasets
Generating an instruction-tuning dataset requires carefully
writing instructions and input-output pairs, which are often
written by humans, smaller in size, and less diverse. To over-
come this, self-instruct [19] proposed an approach to prompt
available LLMs to generate instruction-tuning datasets. Self-
instruct outperformed models trained on manually created
dataset SUPER-NATURALINSTRUCTIONS (a dataset with
1600+ tasks) [18] by 33%. It starts with a seed of 175 tasks, 1
instruction, and 1 sample per task and iteratively generates new
instructions (52k) and instances (82k input-output pairs) using
Figure 11: An example image shows an instance of the Flan training paradigm,
GPT-3 [6]. Contrary to this, Dynosaur [155] uses the meta-data
of datasets on Huggingface to prompt LLMs to generate multi-
LLaMA Tuned: Various models in the literature instruction-
tune LLaMA [156] with GPT-3 [6] or GPT-4 [157] gener-
Among these, Alpaca [158], Vicuna [159],
and LLaMA-GPT-4 [160] are a few general-purpose fine-tuned
models, where Alpaca is trained on 52k samples from text-
davinci-003, Vicuna on 70k samples from ShareGPT.com, and
LLaMA-GPT-4 by re-creating Alpaca instructions from GPT-
4. Goat [161] fine-tunes LLaMA for arithmetic tasks (1 million
samples) by generating data from ChatGPT and outperforms
GPT-4, PaLM, BLOOM, OPT, etc., attributing its success to the
LLaMA’s consistent tokenization of numbers. HuaTuo [162] is
a medical knowledge model, fine-tuned with a generated QA
Complex Instructions: Evol-Instruct [163, 164] prompts LLMs
to convert given instructions into a more complex set. The in-
structions are iteratively evolved with re-writing instructions in
complex wording and creating new instructions. With this style
of automated instruction generation, WizardLM [163] (fine-
tuned LLaMA on 250k instructions), outperforms Vicuna and
Alpaca, and WizardCoder [164] (fine-tuned StarCoder) beats
3.2.3. Aligning with Human Preferences
Incorporating human preferences into LLMs presents a
significant advantage in mitigating undesirable behaviors and
ensuring accurate outputs. The initial work on alignment, such
as InstructGPT [20] aligns GPT-3 using a 3-step approach,
instruction-tuning, reward modeling, and fine-tuning with
reinforcement learning (RL). The supervised fine-tuned GPT-3
on demonstrations is queried to generate responses, which
human labelers rank according to human values, and a reward
model is trained on the ranked data. Lastly, the GPT-3 is trained
with proximal policy optimization (PPO) using rewards on the
generated data from the reward model. LLaMA 2-Chat [21]
improves alignment by dividing reward modeling into help-
fulness and safety rewards and using rejection sampling in
addition to PPO. The initial four versions of LLaMA 2-Chat
are fine-tuned with rejection sampling and then with PPO on
Page 17:
Aligning with Supported Evidence: This style of alignment
allows the model to generate responses with proofs and facts,
reduces hallucination, and assists humans more effectively,
which increases trust in the model’s output.
the RLHF training style, a reward model is trained to rank
generated responses containing web citations in answers
to questions, which is later used to train the model, as in
GopherCite [165], WebGPT [166], and Sparrow [167]. The
ranking model in Sparrow [167] is divided into two branches,
preference reward and rule reward, where human annotators
adversarial probe the model to break a rule. These two rewards
together rank a response to train with RL.
Aligning Directly with SFT: The PPO in the RLHF pipeline
is complex, memory-intensive, and unstable, requiring mul-
tiple models, reward, value, policy, and reference models.
Avoiding this sophisticated alignment pipeline is possible by
incorporating minimal changes in the supervised fine-tuning
(SFT) pipeline as in [168, 169, 170], with better or compa-
rable performance to PPO. Direct preference optimization
(DPO) [168] trains a model directly on the human-preferred
responses to maximize the likelihood of preferred against
unpreferred responses, with per-sample importance weight.
Reward ranked fine-tuning RAFT [169] fine-tunes the model
on ranked responses by the reward model. Preference ranking
optimization (PRO) [171] and RRHF [170] penalize the model
to rank responses with human preferences and supervised loss.
On the other hand, chain-of-hindsight (CoH) [172] provides
feedback to the model in language rather than reward, to learn
human feedback is slow and costly. The literature suggests a
semi-automated process to align LLMs by prompting LLMs to
generate helpful, honest, and ethical responses to the queries,
and fine-tuning using the newly created dataset. Constitutional
AI [173] replaces human feedback in RLHF with AI, calling
it RL from AI feedback (RLAIF). AlpacaFarm [174] designs
prompts to imitate human feedback using LLMs APIs. Oppo-
site to constitutional AI, AlpacaFarm injects noise in feedback
LLM with ICL examples, instructing the LLM about what the
response should contain to be considered useful and ethical.
The same LLM is later fine-tuned with the new dataset.
Aligning with Prompts: LLMs can be steered with prompts to
generate desirable responses without training [175, 176]. The
self-correction prompting in [176] concatenates instructions
and CoT with questions, guiding the model to answer its
instruction following a strategy to ensure moral safety before
the actual answer. This strategy is shown to reduce the harm in
exhibit harmful behaviors, hallucinations, leaking personal in-
formation, and other shortcomings through adversarial probing.
The models are susceptible to generating harmful responses
even though they are aligned for safety [177, 178].
teaming is a common approach to address illicit outputs, where
the LLMs are prompted to generate harmful outputs [178, 179].
The dataset collected through red-teaming is used to fine-tune
models for safety. While red-teaming largely relies on human
annotators, another work [180] red-team LLMs to find prompts
that lead to harmful outputs for other LLMs.
Although fine-tuning boosts a model’s performance, it leads
to catastrophic forgetting of previously learned information.
Concatenating fine-tuning data with a few randomly selected
pre-training samples in every iteration avoids network forget-
ting [181, 152]. This is also effective in adapting LLMs for
cases where fine-tuning data is small and the original capac-
ity is to be maintained. Prompt-based continued pre-training
(PCP) [182] trains the model with text and instructions related
to tasks and then finally instruction-tunes the model for down-
While fine-tuning data is generally many-fold smaller than
the pre-training data, it still has to be large enough for accept-
able performance [16, 97, 18] and requires proportional com-
puting resources. Studying the effects on performance with less
data, existing literature [183, 184] finds that models trained
on less data can outperform models trained with more data.
In [183], 25% of the total downstream data is found enough
for state-of-the-art performance. Selecting coreset-based 0.5%
of the total instruction-tuning data improves the model perfor-
mance by 2% in [184], as compared to the complete data tun-
ing. Less is more for alignment (LIMA) [185] uses only 1000
carefully created demonstrations to fine-tune the model and has
achieved comparable performance to GPT-4.
LLMs are trained with limited context windows due to ex-
pensive attention and high memory requirements.
trained on limited sequence lengths fails to generalize to unseen
lengths at inference time [186, 49]. Alternatively, LLMs with
ALiBi [65] positional encodings can perform zero-shot length
extrapolation. However, ALiBi has less expressive power [66]
and inferior performance on multiple benchmarks [46], and
many LLMs use RoPE positional embedding that is unable to
perform zero-shot extrapolation. A larger context length has
benefits such as a better understanding of longer documents,
more samples in in-context learning, execution of bigger rea-
soning processes, etc. Expanding context length during fine-
tuning is slow, inefficient, and computationally expensive [49].
Therefore, researchers employ various context window extrap-
Position Interpolation: Rather than extrapolating, [49] shows
that interpolating position encodings within the pre-trained con-
text window are more effective. The work demonstrates that
only 1000 steps of fine-tuning are enough to achieve better re-
sults on larger windows without reducing performance com-
pared to the original context size. Giraffe [46] uses power scal-
ing in RoPE, and YaRN [47] proposed NTK-aware interpola-
Page 18:
one of the major constraints in training larger context win-
Using efficient attention variants, such as lo-
cal, sparse, and dilated attention, reduces the computation cost
LongT5 [48] proposes transient global atten-
tion (TGlobal), applying attention to local and global tokens
in T5 [10] with TGlobal attention, pre-trains the model on
4098 sequence length, fine-tunes on larger window sizes, as
large as 16k, and improves task performance on longer inputs.
This shows the extrapolation ability of TGlobal attention with
only fine-tuning. COLT5 [187] uses two branches, one with
lightweight and the other with heavyweight attention and feed-
forward layers. All tokens are processed from the lightweight
branch, and only important tokens are routed to the heavy-
weight branch. LongNet [188] replaces standard attention with
dilated attention, expanding sequence length to 1 billion tokens.
LongLoRA [189] proposes shift-short attention, used during
fine-tuning to reduce dense attention costs. However, the model
during inference uses dense attention and achieves similar per-
formance as full attention fine-tuning.
Extrapolation without Training: LM-Infinite [186] and par-
allel context windows (PCW) [190] show length extrapolation
is possible using pre-trained LLMs. LM-Infinite suggested Λ-
shaped attention applied within the original context window
limits. Likewise, PCW chunks larger inputs into the pre-trained
context lengths and applies the same positional encodings to
LLMs are capable of learning from the examples concate-
nated with the input, known as context augmentation, in-
context learning (ICL), or few-shot prompting. They show ex-
cellent generalization to unseen tasks with few-shot prompt-
ing, enabling LLMs to answer queries beyond the capacity ac-
quired during training [6, 55]. These emergent abilities allow
for adapting the model without fine-tuning—a costly process.
Aside from this, hallucination, producing inaccurate, unsafe,
or factually incorrect responses, is common for LLMs, which is
avoided by augmenting contextual data. While the user can pro-
vide in-context samples in the query [54, 32], here we specifi-
cally refer to the methods that access external storage program-
matically, calling them augmented LLMs.
The literature suggests various external memory designs to aug-
ment LLMs, long-term [191, 192, 193, 194], short-term [195],
symbolic [196], and non-symbolic [197, 198]. The memory
can be maintained in different formats such as documents, vec-
tors, or databases. A few systems maintain intermediate mem-
ory representations to retain information across multiple iter-
ations [194, 192], while others extract important information
from the datasets and save it in memory for recall [199]. The
memory read and write operations are performed either with
or without LLMs cooperation [192, 200, 194, 201], acting as
a feedback signal in [195]. We discuss different types of aug-
Figure 12: A flow diagram of Retrieval Augmented LLMs. The retriever ex-
tracts a similar context to the input and forwards it to the LLM either in simple
language or encoded through Fusion-in-Decoder (FiD). Depending on the task,
retrieval and generation may repeat multiple times.
LLMs may have limited memory and outdated information,
leading to inaccurate responses. Retrieving relevant informa-
tion from external up-to-date storage enables the LLMs to
accurately answer with references and utilize more informa-
tion. With retrieval augmentation, smaller models have been
shown to perform at par with larger models. For instance, the
11B model can become competitive to 540B PaLM in [25] and
7.5B to 280B Gopher in [193]. Retrieval augmented language
modeling (RALM) has two major components, shown in
Figure 12, namely: 1) retriever and 2) language model.
RALM, the retriever plays a crucial role in driving LLM
response, where incorrect information can steer LLMs to false
behavior. This leads to the development of various methods to
retrieve accurate information and fuse with the query for better
Zero-Shot Retrieval Augmentation: This kind of augmen-
tation keeps the original LLM architecture and weights
unchanged and uses BM25 [202], nearest neighbors, or frozen
pre-trained models like Bert [7] as a retriever. The retrieved
information is provided as input to the model for response
generation, shown to improve performance over LLMs without
In some scenarios, multiple retrieval
iterations are required to complete the task.
generated in the first iteration is forwarded to the retriever
to fetch similar documents. Forward-looking active retrieval
(FLARE) [197] initially generates the response and corrects
the output by retrieving relevant documents if the response
contains low-confidence tokens. Similarly, RepoCoder [204]
fetches code snippets recursively for code completion.
Training with Retrieval Augmentation: To reduce failures in
retrieval augmentation generation (RAG), researchers train or
fine-tune retrievers and LLMs with a retrieval augmentation
pipeline. We discuss the literature below based on their focus
on the respective training processes of the pipeline.
Training LLM: Retrieval-enhanced transformer (RETRO) [193]
shows pre-training smaller LLMs with RAG pipeline outper-
forms larger LLMs, such as GPT-3 trained without RAG.
RETRO uses a 2-trillion token subset of MassiveText as
Page 19:
The retrieval pipeline divides the input query
into subsets and retrieves relevant chunks from the database
for each subset, encoded together with input intermediate
representations for generating tokens. It uses cross-chunked
attention to attend to previous chunks auto-regressively.
study on RETRO [205] shows models pre-trained without RAG
but fine-tuned using RAG lack the performance gains obtained
Training Retriever: Quality of responses generated by LLMs
is highly dependent on the in-context examples.
fore, [206, 207, 208, 209] train retrievers to retrieve accurate
few-shot samples while keeping the LLM frozen for gener-
Retrieved samples are ranked to build ground-truth
data to train retrievers with contrastive learning in [206, 208].
RoBERTa is trained for downstream tasks in [207] for ICL
REPLUG [209] trains the retriever with
supervised signals from the frozen LLM-generated outputs.
Training Retriever and LLM: Further benefits are achieved by
training both the retriever and the model in [25, 210, 211]. In
this case, the error propagates back to the retriever, updating
both the language model and the retriever.
language modeling (MLM) is a common pre-training objec-
tive [25, 211], retrieval pre-trained transformer (RPT) [210]
used document chunk prediction as a pre-training objective for
documents with the query becomes infeasible as the sequence
length and sample size grow. Encoding the context and fusing
it with the decoder (Fusion-in-Decoder) using cross-attention
makes it possible to augment more samples without increasing
computation costs significantly [212, 193, 210, 25].
Locally stored memory, but external to
LLM, has limited information. However, a large amount of
information is available on the internet, which gets updated
Rather than storing information locally, various
methods retrieve query-related context through a web search
and forward it to LLMs [213, 214, 166].
While RAG relies on the retriever to provide context to the
LLM to answer queries, tool augmented LLMs capitalize on the
reasoning abilities of LLMs to iteratively plan by dividing tasks
into sub-tasks, selecting necessary tools, and taking actions to
complete the task [215, 216, 217, 27]. A generic pipeline of
tool-augmented LLMs is shown in Figure 13, where different
modules in Figure 13 are selected in a loop until the task com-
Zero-Shot Tool Augmentation: LLMs in-context learning and
reasoning abilities enable them to interact with tools with-
out training. Automatic reasoning and tool-use (ART) [217]
builds a task library with demonstrations of reasoning steps and
calling external tools. It retrieves similar task examples and
provides the context to the LLM for inference. Aside from
this, [218] shows tool documentation is enough to teach LLMs
to use tools without demonstrations. RestGPT [219] integrates
LLMs with RESTful APIs by decomposing tasks into planning
Figure 13: A basic flow diagram of tool augmented LLMs. Given an input and
a set of available tools, the model generates a plan to complete the task. The
tool augmented LLMs utilize different modules iteratively, such as retriever,
tool execution, read-write to memory, feedback, etc., depending on the task.
and API selection steps. The API selector understands the API
documentation to select a suitable API for the task and plan the
execution. ToolkenGPT [220] uses tools as tokens by concate-
nating tool embeddings with other token embeddings. During
inference, the LLM generates the tool tokens representing the
tool call, stops text generation, and restarts using the tool exe-
Training with Tool Augmentation: LLMs are trained to inter-
act with diverse tools, enhancing planning abilities to overcome
the limitations of zero-shot tool augmentation [221, 27, 222,
223]. Gorilla [221] instruction-tunes LLaMA with information
retrieval from API documentation. It uses the self-instruct [19]
data generation pipeline with GPT-4 by providing in-context
examples retrieved from API documentation. Tool augmented
language model (TALM) [27] fine-tunes T5 [10] for tool use
with a self-play approach, where it iteratively completes tool
manipulation tasks and includes them back in the training set.
ToolLLM [223] collects 16k APIs from RapidAPI. It samples
APIs from the list to generate an instruction-tuning dataset us-
ing ChatGPT in single-tool and multi-tool scenarios. For high-
quality datasets, ToolLLM suggested a depth-first search-based
decision tree (DFSDT) method to generate ground-truths with
Multimodal Tool Augmentation: The compositional reasoning
capacity of LLMs allows them to manipulate tools in multi-
modal settings [215, 216, 224]. Following the pipeline shown
in Figure 13, the LLM outlines a plan, generally executing in a
sequence: Plan →Tool selection →Execute →Inspect →
Generate, to respond to the user query. Here, the database of
tools is rich in modalities, including text, images, etc. Many of
the multimodal tool augmentation systems employ multimodal
LLMs [31, 225, 224, 216], while others utilize single modality
Page 20:
LLMs and generate a plan on using different modality tools to
AI agents are autonomous entities, capable of planning,
decision-making, and performing actions to achieve complex
In the early days, AI agents were rule-based, de-
signed for narrow tasks, and had limited capabilities, such
as Clippy [227] and Deep Blue [228].
LLMs abilities to respond to dynamic scenarios have made it
possible to incorporate them in diverse applications, includ-
ing LLMs-powered agents [224, 216], where LLMs behave
as the brain of agents. LLMs have been incorporated in web
agents [166, 167], coding agents [229], tool agents [27, 223],
embodied agents [26], and conversational agents [195], requir-
ing minimal to no fine-tuning". Below we summarize the re-
search in LLMs-based autonomous agents. For a more detailed
discussion, please refer to [230, 231].
LLMs Steering Autonomous Agents: LLMs are the cognitive
controllers of the autonomous agents. They generate plans, rea-
son about tasks, incorporate memory to complete tasks, and
adapt the outline depending on the feedback from the environ-
ment. Depending on the acquired capabilities of LLMs, many
methods fine-tune, propose a better prompting approach, or uti-
lize different modules to enhance agents’ performance. Mod-
ules and strategies employed in autonomous agents are briefly
Planning and Reasoning: Completing a complex task requires
human-like logical thinking, planning necessary steps, and
reasoning current and future directions. Prompting methods
like chain-of-thoughts [103], tree-of-thoughts [105], and self-
consistency [104] are central to agents, eliciting LLMs to rea-
son its actions and choose among different paths for task com-
pletion. When LLMs are prompted with a task description and
a sequence of actions, they can accurately generate plan ac-
tions without any fine-tuning [232]. Reasoning via planning
(RAP) [233] incorporates a re-purposed LLM as a world model
to reason about future outcomes and explore alternative paths
for task completion. Retroformer [234] uses a retrospective
LLM to improve main LLM planning and reasoning capabil-
ities by providing helpful task cues.
Feedback: LLMs in open-loop systems generate plans and as-
sume that the agent will complete them successfully. However,
the actual scenario is different with failures and variable re-
sponses from the environment. To correctly complete tasks,
many methods use LLMs in a closed-loop where the action re-
sponse is provided as feedback to the LLMs to re-assess and
update the plan as required [235, 236, 237, 195]. Another di-
rection of research exploits LLMs as reward functions to train
reinforcement learning (RL) policies instead of humans [238].
Memory: LLMs can learn from the context provided in the
prompt. In addition to internal memory, various systems em-
ploy external memory to save the response history.
ion [195] maintains an episodic memory to use previous re-
sponses as feedback to improve future decision-making. Retro-
former [234] improves its responses by employing short-term
and long-term memory, where short-term memory contains re-
cent responses and long-term memory keeps summarized failed
attempts to add in the prompt as reflection.
Multi-Agents Systems: LLMs can play user-defined roles and
behave like a specific domain expert. In multi-agent systems,
each LLM is assigned a unique role, simulating human behav-
ior and collaborating with other agents to complete a complex
instruction-following, however, utilizing them for physically
grounded tasks requires adaptation, as they lack real-world
knowledge. This could lead to generating illogical responses
for a particular physical situation [240, 26].
make LLMs aware of the available low-level task operations.
LLM (Say) builds a high-level plan to complete the task and
a learned affordance function (Can) explores the possibility of
executing the plan in the real world. SayCan uses RL to train
the language-conditioned affordance function. PaLM-E enables
the LLM to solve grounded tasks by training multi-modal LLM
feeding inputs directly from the sensors.
Manipulation: In the area of manipulation [236, 241], LLMs
enhance a robot’s dexterity and adaptability, excelling in tasks
like object recognition, grasping, and collaboration. They ana-
lyze visual and spatial information to determine the most effec-
tive approach to interact with objects.
Navigation: LLMs enhance a robot’s ability to navigate com-
plex environments with precision and adaptability [242, 243,
244, 245]. They generate feasible paths and trajectories for
robots, accounting for intricate environmental details [246].
This ability is valuable in scenarios requiring precise and
dynamically adaptable navigation in environments like ware-
houses, transport, healthcare facilities, and residences.
Deploying LLMs in production is expensive. Reducing their
running costs while preserving performance is an appealing
area of research. This section summarizes the approaches sug-
gested to enhance LLMs’ efficiency.
Fine-tuning LLMs with tens or hundreds of billions of pa-
rameters, such as GPT-3 (175B), BLOOM (176B), MT-NLG
(540B), etc., is computationally intensive and time-consuming.
To avoid complete model fine-tuning, numerous parameter-
efficient fine-tuning (PEFT) techniques [40, 247, 41, 38, 39] try
to achieve acceptable model fine-tuning performance at reduced
costs. As compared to full fine-tuning [248], PEFT performs
better in low-resource setups, achieves comparable perfor-
mance on medium-resource scenarios, and performs worse than
full fine-tuning under high-resource availability. An overview
of different PEFT approaches is shown in Figure 14.
Adapter Tuning: Adds a few trainable parameters within the
transformer block. The adapter layer is a sequence of feature
downscaling, non-linearity, and upscaling [106]. Variants of
adapter tuning inject adapter layers sequentially [106] and in
parallel [38], whereas the mixture of adapter (AdaMix) [249]
Page 21:
Figure 14: Illustration of parameter-efficient fine-tuning paradigms, where x is input and h is hidden state, figure courtesy [38]. Parallel adapter and LoRA fall in
employs multiple adapter modules in a single layer. AdaMix
routes input instances randomly to one of the multiple down-
scale and upscale modules. The mixture of adapters is averaged
out for inference to avoid additional latency. Low-Rank Adap-
tation (LoRA) [250] learns low-rank decomposed matrices to
freeze original weights. The learned weights are fused with the
original weights for inference, avoiding latency.
Prompt Tuning: Prompting is an effective way to adapt a
pre-trained LLM for the downstream task. However, manual
prompts bring uncertainty in the model’s prediction, where a
change in a single word drops the performance [247]. Prompt
tuning alleviates this problem by fine-tuning only 0.001%-3%
additional parameters [251]. It concatenates trainable prompt
parameters with the model embeddings [247, 40, 251]. Task-
specific fixed discrete prompts are concatenated with input em-
beddings in [40]. As discrete prompts bring instability, prompts
are encoded through a learnable mapping in P-Tuning [247],
naming continuous prompts, which are appended with the dis-
Only the prompt encoder is trainable in the
model. In an extension of P-Tuning, continuous prompts are
concatenated with each layer of the network in [251]. Progres-
sive prompts [252] avoid catastrophic forgetting and transfer
previously learned knowledge by sequentially adding trainable
prompt embeddings to the previously frozen task embeddings.
Prefix Tuning: A set of trainable task-specific prefix vectors
are appended to the frozen transformer layers in prefix tun-
ing [41]. The prefix vectors are virtual tokens attended by the
context tokens on the right. In addition, adaptive prefix tun-
ing [253] applies a gating mechanism to control the information
from the prefix and actual tokens.
Bias Tuning: Fine-tuning only bias terms in small to medium
training data has been found effective in BitFit [254].
method achieves full fine-tuning performance for tasks with less
training data and comparable performance with more training
LLMs require extensive computing and memory for infer-
Deploying a 175B parameter GPT-3 model needs at
least five 80GB A100 GPUs and 350GB of memory to store in
FP16 format [44]. Such demanding requirements for deploying
LLMs make it harder for smaller organizations to utilize them.
Model compression is an effective solution but comes at the cost
of degraded performance, especially at large scales greater than
6B. These models exhibit very large magnitude outliers that do
not exist in smaller models [255], making it challenging and re-
quiring specialized methods for quantizing LLMs [44, 256].
Post-Training Quantization: Minimal or no training is re-
quired in this type of quantization, without significantly com-
promising the model performance. LLM-8-bit [255] uses full-
precision matrix multiplication for weights associated with out-
lier features and 8-bit for remaining features. The lower pre-
cision multiplication outputs are converted to FP-16 and con-
catenated with others. The quantized models have homogenous
word embeddings, which may degrade their performance. To
fix this, token-level knowledge distillation is employed in [45]
along with independent quantization scaling factors for each
module due to varying weight distribution. Feature distribu-
tions are asymmetric and appear in different channels; outlier
suppression [257] shifts and scales per-channel activation dis-
tributions for effective quantization. SmoothQuant [44] quan-
tizes activations and weights to INT8 format by smoothing
activations and migrating the quantization difficulty toward
weights. It multiplies the inverse of the smoothing factor with
weights, which introduces a few outliers in the weights but is
easier to quantify than unsmoothed activations. OPTQ [256]
uses the optimal brain compression (OBC) [258] algorithm to
quantize the model layer-by-layer and update weights to com-
To improve speed and per-
formance, OPTQ updates weights in arbitrary order, employs
lazy updates, and uses better Cholesky kernels. Outlier-aware
weight quantization (OWQ) [259] uses the OPTQ algorithm for
quantization but assigns higher precision to vulnerable weights,
causing outliers and lower precision for others.
a quantized model is fine-tuned in
quantization-aware training (QAT) [260, 261, 262].
pha Tuning quantizes the model using binary coding quan-
tization (BCQ) [263] and fine-tunes only quantization scal-
This approach improves performance over
Page 22:
parameter-efficient fine-tuning of the pre-trained model. Sim-
ilarly, parameter-efficient and quantization-aware adaptation
(PEQA) [264] reduces the precision of fully-connected layers
and fine-tunes only quantization scaling parameters.
QAT [262] generates training data from the pre-trained network
and trains a quantized student model with knowledge distilla-
tion. QLoRA [261] fine-tunes 4-bit quantized pre-trained LLM
with LoRA [250] using a 4-bit normal float, which shows better
performance over a 4-bit integer and float.
Pruning is an alternative approach to quantization to com-
press model size, thereby reducing LLMs deployment costs
significantly. Compared to task-agnostic pruning, task-specific
pruning is easily achievable with good performance, where a
model is fine-tuned on the downstream task and pruned for
faster inference. It is possible to prune LLMs for individual
tasks, but the cost of pruning and deploying task-specific mod-
els is high. To overcome this, many structured and unstructured
pruning methods for LLMs have been proposed to maintain rea-
sonable performance across all tasks while shrinking the model
Unstructured Pruning: This kind of pruning removes less im-
portant weights without maintaining any structure.
LLM pruning methods take advantage of the unique charac-
teristics of LLMs, uncommon for smaller models, where a
small subset of hidden states are activated with large magni-
tude [255]. Pruning by weights and activations (Wanda) [265]
prunes weights in every row based on importance, calculated
by multiplying the weights with the norm of input. The pruned
model does not require fine-tuning, thereby saving computa-
tional costs. Outlier weighed layerwise sparsity (OWL) [267]
extends Wanda with non-uniform layer pruning. It shows that
the number of outliers varies for different layers; therefore, the
model should have variable pruning ratios for better perfor-
mance for every layer. Contrastive pruning (CAP) [43] itera-
tively prunes the model by training the sparse model using con-
trastive loss between pre-trained, fine-tuned, and snapshots of
previous sparse models to learn task-specific and task-agnostic
Structured Pruning: Here, the parameters are removed in
groups, rows, columns, or matrices, which speeds up the
inference because of effective hardware tensor core utiliza-
LLM-Pruner [42] employs a 3-stage structured
pruning strategy, identifying the groups of hidden states caus-
ing each other to activate during the forward-pass, keeping im-
portant groups and removing less important ones, and fine-
tuning the pruned model with LoRA. Sparsity-induced mask
learning (SIMPLE) [268] prunes the network using learnable
masks. Similarly, another method prunes LLMs by learning
masks and removing unimportant rank-1 components of the
Inspired by the success of LLMs in natural language process-
ing applications, an increasing number of research works are
now facilitating LLMs to perceive different modalities of infor-
mation like image [269, 270, 271], video [272, 273, 274], au-
dio [275, 274, 276], etc. Multimodal LLMs (MLLMs) present
substantial benefits compared to standard LLMs that process
only text. By incorporating information from various modal-
ities, MLLMs can achieve a deeper understanding of context,
leading to more intelligent responses infused with a variety of
expressions. Importantly, MLLMs align closely with human
perceptual experiences, leveraging the synergistic nature of our
multisensory inputs to form a comprehensive understanding of
the world [276, 26]. Coupled with a user-friendly interface,
MLLMs can offer intuitive, flexible, and adaptable interactions,
allowing users to engage with intelligent assistants through a
spectrum of input methods. According to the ways of construct-
ing models, current MLLMs can be generally divided into three
streams: pre-training, fine-tuning, and prompting. In this sec-
tion, we will discuss more details of these main streams, as well
as the important application of MLLMs in visual reasoning.
Pre-training: This stream of MLLMs intends to support differ-
ent modalities using unified end-to-end models. For instance,
Flamingo [269] applies gated cross-attention to fuse vision and
language modalities, which are collected from pre-trained and
frozen visual encoder and LLM, respectively. Moreover, BLIP-
2 [270] proposes a two-stage strategy to pre-train a Querying
Transformer (Q-Former) for the alignment between vision and
language modalities: in the first stage, vision-language repre-
sentation learning is bootstrapped from a frozen visual encoder;
and in the second stage, a frozen LLM bootstraps vision-to-
language generative learning for zero-shot image-to-text gen-
eration. Similarly, MiniGPT-4 [277] deploys pre-trained and
frozen ViT [278], Q-Former and Vicuna LLM [159], only train-
ing the linear projection layer for vision and language modali-
Fine-tuning: Derived from instruction tuning [16] for NLP
tasks [20, 16, 97], researchers are fine-tune pre-trained LLMs
using multimodal instructions. Following this method, LLMs
can be easily and effectively extended as multimodal chat-
bots [277, 271, 29] and multimodal task solvers [279, 30, 280].
The key issue of this stream of MLLMs is to collect multi-
modal instruction-following data for fine-tuning [58]. To ad-
dress this issue, the solutions of benchmark adaptation [279,
281, 282], self-instruction [19, 31, 283], and hybrid composi-
tion [284, 280] are employed, respectively. To mitigate the gap
between the original language modality and additional modal-
ities, the learnable interface is introduced to connect differ-
ent modalities from frozen pre-trained models.
the learnable interface is expected to work in a parameter-
efficient tuning manner: e.g., LLaMA-Adapter [285] applies
an efficient transformer-based adapter module for training,
and LaVIN [284] dynamically learns the multimodal feature
weights using a mixture-of-modality adapter. Different from
the learnable interface, the expert models can directly convert
multimodalities into language: e.g., VideoChat-Text [272] in-
corporates Whisper [286], a speech recognition expert model,
to generate the captions of given videos for the understanding
Different from the fine-tuning technique that
Page 23:
directly updates the model parameters given task-specific
datasets, the prompting technique provides certain context, ex-
amples, or instructions to the model, fulfilling specialized tasks
without changing the model parameters. Since prompting can
significantly reduce the need for large-scale multimodal data,
this technique is widely used to construct MLLMs. Particularly,
to solve multimodal Chain of Thought (CoT) problems [103],
LLMs are prompted to generate both the reasoning process and
the answer given multimodal inputs [287]. On this front, differ-
ent learning paradigms are exploited in practice: for example,
Multimodal-CoT [287] involves two stages of rationale genera-
tion and answer inference, where the input of the second stage
is a combination of the original input and the output of the first
stage; and CoT-PT [288] applies both prompt tuning and spe-
cific visual bias to generate a chain of reasoning implicitly. In
addition to CoT problems, LLMs can also be prompted with
multimodal descriptions and tools, effectively dividing complex
tasks into sub-tasks [289, 290].
Visual Reasoning Application: Recent visual reasoning sys-
tems [291, 292, 216, 293] tend to apply LLMs for better visual
information analysis and visual-language integration. Differ-
ent from previous works [294, 295] that rely on limited VQA
datasets and small-scale neural networks, current LLM-aided
methods offer benefits of stronger generalization ability, emer-
gent ability, and interactivity [58]. To realize visual reasoning
with the help of LLMs, prompting and fine-tuning techniques
can also be utilized: for example, PointClip V2 [292] applies
LLMs to generate 3D-specific prompts, which are encoded as
textual features and then combined with visual features for
3D recognition; and GPT4Tools [31] employs LoRA [250] to
fine-tune LLMs following tool-related instructions.
as a controller [293], decision maker [296], or semantics re-
finer [291, 297], LLMs significantly facilitates the progress of
Due to the gigantic scale of LLMs, minor changes in archi-
tecture and training strategies have a big impact on performance
and stability. Here, we summarize key architectural modules
used in various LLMs, leading to better performance, reduced
training time and memory, and better training stability.
Layer Normalization: The performance and training stability
of LLMs are affected significantly by layer normalization. Pre-
norm, that is normalizing inputs rather than outputs, is more
common among LLMs stabilizing the training [6, 127, 108].
BLOOM [13] and AlexaTM [122] utilize an additional layer
normalization before embedding layer to stabilize the training
of large-scale models, while the model’s zero-shot generaliza-
tion ability can be negatively impacted [13]. However, another
study [33] finds that pre-norm degrades fine-tuned model per-
formance as compared to post-norm, and there are no stability
benefits of pre-norm beyond the 100B scale. Therefore, GLM-
130B [33] used deep-norm which is a variant of post-norm for
better downstream task performance after fine-tuning.
Positional Encoding: Like other building blocks of the model,
positional encoding also affects the performance and training
BLOOM [13] finds ALiBi outperforms
learned and rotary positional encodings.
GLM-130B [33] identifies rotary positional encoding as being
better than ALiBi. So, there is no conclusion in the literature
Parallel Attention: In this type of attention, feed-forward and
attention layers are parallel to each other rather than sequen-
tial in a transformer block. It has been shown to reduce train-
ing time by 15%. There is no evidence of performance drop
due to this change in the literature and it is used by the models
PaLM [15], GPT-NeoX [118], and CodeGen [140].
Multi-Query Attention It has shared key and value attention
heads in a transformer block while query attention heads are
projected as usual. This reduces memory usage and speeds up
sampling in autoregressive decoding. No performance degrada-
tion has been observed with this change and it makes the train-
ing efficient allowing larger batch sizes. Multi-query attention
is used in [15, 142].
Mixture of Experts: This type of architecture enables eas-
ily scaling models to trillions of parameters [92, 91]. Only a
few experts are activated during the computation making them
compute-efficient. The performance of MoE models is better
than dense models for the same amount of data and requires less
computation during fine-tuning to achieve performance similar
to dense models as discussed in [91]. MoE architectures are
less prone to catastrophic forgetting, therefore are more suited
for continual learning [92]. Extracting smaller sub-models for
downstream tasks is possible without losing any performance,
making MoE architecture hardware-friendly [92].
Sparse vs Dense Activated: GPT-3 [6] uses sparse transform-
ers [67] whereas GLaM [91] and PanGu-P [92] use MoE [121]
architectures to lower computational costs and increase the
model size and capacity. According to the literature, sparse
modules do not degrade the model’s performance [67]. How-
ever, more experiments are required to verify this statement.
Training models at a huge scale require tricks to reduce train-
ing costs, avoid loss divergence, and achieve better perfor-
mance. We summarize and discuss some of these key tricks
Mixed Precision: It is a famous method for LLMs to reduce
memory usage and improve training efficiency. In mixed pre-
cision, forward and backward passes are performed in FP16
format whereas optimizer states and master weights are kept
in FP32 format [120]. A drawback associated with this for-
mat change is training instability due to a smaller value range
resulting in loss spikes [33]. An alternative to FP16 is BF16
which has a comparatively larger range and performs precision-
sensitive operations like gradient accumulation and softmax in
FP32 [13]. BF16 has better performance and training stability
but uses more memory and is supported on specific hardware,
for example, A100 GPUs. Therefore, its adoption in LLMs is
Training Instability: Loss divergence or spiking is a common
issue in LLMs that occurs multiple times during training. This
Page 24:
happens in the presence of gradient clipping [15]. To mitigate
this problem, many approaches suggest restarting training from
an earlier checkpoint [15, 33, 91], skipping 200-500 earlier
data batches at the point of divergence in [15] and re-shuffling
batches in [91]. The embedding layer gradient shrink proves to
further stabilize the training as its gradient norm is significantly
larger than the other layers [33]. Another suggestion to improve
training stability for larger models is not to use biases in dense
and norm layers as in [15].
Weight Initialization: It plays a significant role in model con-
feed-forward layers before residuals with
d as in [153] and
other layers with the small initialization scheme [298]. This
avoids activations growing exponentially with increasing depth.
MT-NLG [117] found higher variance for weight initialization
leads to unstable training, hence validating small initialization
scheme [298]. Various models perform random weight initial-
ization which can cause bad initialization, Galactica [148] sug-
gests a longer warmup to negate the effect.
Learning Rate: A suitable learning rate is important for sta-
ble training. It is suggested to use a lower value [13, 15, 124]
with warmup and decay (cosine or linear). Usually, the learn-
ing rate is within the range 1e−4 to 8e−4. Moreover, MT-NLG
(530B) [117] and GPT-NeoX (20B) [118] suggest interpolat-
ing learning rates based on the model size using the GPT-3 [6]
models ranging between 13B and 175B. This avoids tuning the
Training Parallelism: 3D parallelism, a combination of data,
pipeline, and tensor parallelism, is the most utilized training
parallelism approach in LLMs [33, 15, 14, 13, 117, 115, 112].
In addition to 3D parallelism, BLOOM [13] uses a zero op-
timizer [37] to shard optimizer states.
PanGu-Σ [92] go beyond 3D parallelism and apply 5D paral-
lelism which additionally contains optimizer parallelism and
Mode Switching: It adds task-related tokens at the beginning
of the text during training. These tokens refer to the natural
language understanding and natural language generation tasks
which are shown to improve downstream task performance
in [125, 124, 122]. During fine-tuning and inference, tokens
are appended based on the downstream tasks.
Controllable Text Generation: Generating credible and con-
trolled text from a pre-trained model is challenging. GPT-3 [6]
and other LLMs use in-context learning to control generated
text. While in-context learning helps in controlling the gener-
ated text, ERNIE 3.0 Titan [35] suggests using adversarial loss
to rank its generated text for credibility and soft prompts such as
genre, topic, keywords, sentiment, and length for better control
3.8.3. Supervised Models vs Generalized Models
Although generalized models are capable of performing di-
verse tasks with good performance they have not yet outper-
formed models trained in supervised settings. The supervised
trained models are still state-of-the-art in various NLP tasks by
a large margin as shown in [6, 15, 18].
LLMs perform well in zero-shot and few-shot settings. But
the performance difference between zero-shot and few-shot is
large for pre-trained models [6, 15], naming LLMs as meta-
learners [6]. LLMs zero-shot evaluations underperform unsu-
pervised methods in neural machine translation [6]. The liter-
ature shows pre-training is not enough for good zero-shot per-
formance [15, 16]. To improve the zero-shot performance the
literature suggests using instruction fine-tuning that improves
the zero-shot performance significantly and outperforms base-
lines. Instruction fine-tuning has also been shown to improve
zero-shot generalization to unseen tasks. Another model, Flan-
PaLM [16], unlocks zero-shot reasoning with CoT training.
3.8.5. Encoder vs Decoder vs Encoder-Decoder
Traditionally, these architectures perform well for different
tasks, for example, encoder-only for NLU tasks, decoder-only
for NLG, and encoder-decoder for sequence2sequence model-
ing. Encoder-only models are famous for smaller models such
as Bert [7], RoBERTa [299], etc., whereas LLMs are either
decoder-only [6, 118, 13] or encoder-decoder [10, 11, 122].
While decoder-only models are good at NLG tasks, various
LLMs, PaLM [15], OPT [14], GPT-3 [6], BLOOM [13],
LLaMA [156], are decoder-only models with significant per-
formance gains on both NLU and NLG tasks. In contradic-
tion to this, T5 [10] and UL2 [125] identify encoder-decoder
models out-performing decoder-only models. In another study,
PaLM [15] finds increasing the size of decoder-only models
can reduce the performance gap between decoder-only and
Although decoder-only architectures have become a trend for
LLMs, many recently proposed approaches [125, 122] use
mode-switching tokens in text with encoder-decoder architec-
tures to enable task-specific modes. Similarly, CodeT5+ [34]
uses an encoder-decoder architecture with multiple training ob-
jectives for different tasks, activating the encoder, decoder, or
both according to the tasks. These variations in architecture
and training objectives allow a model to perform well in differ-
ent settings. Because of this dynamic configuration, the future
of LLMs can be attributed to encoder-decoder architectures.
We provide different statistics of pre-trained and instruction-
tuned models in this section. This includes information such as
publication venue, license type, model creators, steps trained,
parallelism, etc in Table 3 and Table 4. Architecture details
of pre-trained LLMs are available in Table 5. Providing these
details for instruction-tuned models is unnecessary because it
fine-tunes pre-trained models for instruction datasets. Hence,
architectural details are the same as the baselines. Moreover,
optimization settings for various LLMs are available in Table 6
and Table 7. We do not include details on precision, warmup,
and weight decay in Table 7. These details are not as important
as others to mention for instruction-tuned models, and are not
Page 25:
Table 3: Summary of pre-trained LLMs (>10B). Only the LLMs discussed individually in the previous sections are summarized. “Data/Tokens” is the model’s
pre-training data, which is either the number of tokens or data size. “Data Cleaning” indicates whether data cleaning is performed or not. This includes heuristics
(Heur), deduplication (Dedup), quality filtering (QF), and privacy filtering (PF), “Cost” is the calculated training cost obtained by multiplying the GPUs/TPUs
hourly rate with the number of GPUs and the training time. The actual cost may vary due to many reasons such as using in-house GPUs or getting a discounted rate,
re-training, number of employees working on the problem, etc. “Training Parallelism” indicates distributed training using data parallelism (D), tensor parallelism
(T), pipeline parallelism (P), context parallelism (C), model parallelism (M), optimizer parallelism (OP), and rematerialization (R), where for “Library” column,
“DS” is a short form for Deep Speed. In column “Commercial Use”, we assumed a model is for non-commercial purposes if its license is unavailable.
Table 4: Summary of instruction tuned LLMs (>10B). All abbreviations are the same as Table 3. Entries in “Data/Tokens” starting with “S-” represent the number
Generating training and evaluation datasets is expensive be-
cause of the large-scale data demand of LLMs. Hence, datasets
for training and benchmarking these models are topics of key
importance. A summary of datasets commonly used by LLMs
The performance of LLMs largely depends on the training
data’s quality, size, and diversity. Preparing training datasets
of high quality at a large scale is laborious. Researchers have
suggested various pre-training and fine-tuning datasets to en-
hance LLMs capabilities. We summarize these efforts in Ta-
ble 8. While numerous training datasets are available in the
literature, we cover the most widely used ones in our summary.
Page 26:
Table 5: Architecture details of LLMs. Here, “PE” is the positional embedding, “nL” is the number of layers, “nH” is the number of attention heads, “HS” is the
5.2. Evaluation Datasets and Tasks
The evaluation of LLMs is important in gauging their profi-
ciency and limitations. This process measures the model’s abil-
ity to comprehend, generate, and interact with human language
across a spectrum of tasks. Evaluating a language model (LM)
is divided into two broader categories: 1) natural language un-
derstanding (NLU) and 2) natural language generation (NLG).
It is emphasized that tasks in NLU and NLG are softly catego-
rized and are often used interchangeably in the literature.
Natural Language Understanding: It measures the language
understanding capacity of LMs. It encompasses multiple tasks,
including sentiment analysis, text classification, natural lan-
guage inference (NLI), question answering (QA), common-
sense reasoning (CR), mathematical reasoning (MR), reading
Natural Language Generation: It assesses the language gener-
ation capabilities of LLMs by understanding the provided input
context. It includes tasks such as summarization, sentence com-
pletion, machine translation (MT), dialogue generation, etc.
Numerous datasets are proposed for each task, evaluating
LLMs against different characteristics. To provide an overview
of evaluation datasets, we briefly discuss a few famous datasets
within each category and offer a comprehensive list of datasets
in Table 9. Moreover, we show a detailed overview of the train-
ing datasets and evaluation tasks and benchmarks used by vari-
ous pre-trained LLMs in Table 10 and fine-tuned LLMs in Ta-
ble 11. We also compare the top-performing LLMs in various
NLP tasks in Table 12.
MMLU [307]: A benchmark that measures the knowledge
acquired by models during pretraining and evaluates models in
zero-shot and few-shot settings across 57 subjects, testing both
world knowledge and problem-solving ability.
SuperGLUE [2]: A more challenging and diverse successor
to the GLUE [309] benchmark, SuperGLUE includes a variety
of language understanding tasks, such as question answering,
natural language inference, and co-reference resolution. It is
designed to provide a rigorous test of language understanding
and requires significant progress in areas like sample-efficient,
transfer, multi-task, and unsupervised or self-supervised learn-
BIG-bench [308]: The BIG-bench (Behavior of Intelligent
Generative Models Benchmark) is a large-scale benchmark de-
signed to test the abilities of LLMs across a wide range of
tasks, including reasoning, creativity, ethics, and understanding
GLUE [309]: The General Language Understanding Evalua-
tion (GLUE) benchmark is a collection of resources for train-
ing, evaluating, and analyzing natural language understanding
Page 27:
Table 6: Summary of optimization settings used for pre-trained LLMs. The values for weight decay, gradient clipping, and dropout are 0.1, 1.0, and 0.1, respectively,
for most of the LLMs.
AdaFactorAdam AdamWFP16 BF16 Mixed Decay
Table 7: Summary of optimization settings used for instruction-tuned LLMs. Values for gradient clipping and dropout are the same as the pre-trained models, while
no model uses weight decay for instruction tuning.
systems. It includes a variety of tasks that test a wide range of
linguistic phenomena, making it a comprehensive tool for eval-
uating language understanding in AI.
WinoGrande [354]: A large-scale dataset inspired by the orig-
inal Winograd [357] Schema Challenge tests models on their
ability to resolve pronoun ambiguity and encourages the devel-
opment of models that understand the broad context in natural
CoQA [316]: A conversational question-answering dataset,
CoQA challenges models with questions that rely on conver-
sation history and require free-form text answers. Its diverse
content from seven domains makes it a rigorous test for mod-
els’ ability to handle a wide range of topics and conversational
WiC [317]: This dataset assesses a model’s ability to dis-
cern word meanings based on context, aiding in tasks related
Page 28:
Table 8: Details of various well-known pre-training and fine-tuning datasets. Here, alignment means aligning with human preferences.
A clean, multilingual dataset with billions
A multilingual extension of the C4
dataset, mC4 identifies over 100 lan-
guages using cld3 from 71 monthly web
A massive dataset comprised of 22 con-
46 natural and 13 programming lan-
99% of the data is in English
Open-source replica of LLaMA dataset
Submissions and comments on Reddit
Pool of Prompt (P3) [17]
A Subset of PromptSource, created from
Extending P3 to total 46 languages
Extending P3 with additional multi-
lingual datasets, total 46 languages
Generated 52k instructions with 82k sam-
ples from 175 seed tasks using GPT-3
Employed self-instruct method to gener-
Recreated Alpaca dataset with GPT-4 in
Carefully created samples to test perfor-
mance with fine-tuning on less data
With over 100 million tokens from
Wikipedia’s top articles, this dataset is a rich resource for tasks
that require understanding long-term dependencies, such as lan-
PG19 [319]: This is a digital library of diverse books from
Project Gutenberg. It is specifically designed to facilitate re-
search in unsupervised learning and language modeling, with a
special focus on long-form content.
C4 [10]: A clean, multilingual dataset, C4 offers billions of to-
kens from web-crawled data. It is a comprehensive resource for
training advanced Transformer models on various languages.
LCQMC [320]: The Large-scale Chinese Question Matching
Corpus (LCQMC) is a dataset for evaluating the performance
of models in semantic matching tasks. It contains pairs of ques-
tions in Chinese and their matching status, making it a valuable
resource for research in Chinese language understanding.
5.2.3. Story Cloze and Sentence Completion
StoryCloze [334]: It introduces a new “StoryCloze Test”, a
commonsense reasoning framework for evaluating story under-
standing, generation, and script learning. It considers a model’s
ability to understand and generate coherent and sensible stories.
LAMBADA [335]: This dataset evaluates contextual text un-
derstanding through a word prediction task. Models must pre-
dict the last word of a passage, which is easy for humans when
given the whole passage, but not when given only the last sen-
5.2.4. Physical Knowledge and World Understanding
PIQA [340]: A dataset that probes the physical knowledge of
models, aiming to understand how well they are learning about
TriviaQA [341]: A dataset that tests models on reading com-
prehension and open domain question answering (QA) tasks,
with a focus on Information Retrieval (IR)-style QA.
ARC [342]: A larger version of the ARC-Challenge, this
dataset contains both easy and challenging grade-school level,
multiple-choice science questions. It is a comprehensive test of
a model’s ability to understand and answer complex questions.
A subset of the ARC dataset, ARC-
Easy, contains questions that are answered correctly by either
a retrieval-based algorithm or a word co-occurrence algorithm.
Page 29:
Table 9: Categorized evaluation datasets used in evaluating LLMs.
MMLU [307], SuperGLUE [2], BIG-bench [308], GLUE [309], BBH [308], CUGE [310], Zero-
CLUE [311], FewCLUE [312], Blended Skill Talk [313], HELM [314], KLUE-STS [315]
CoQA [316], WiC [317], Wikitext103 [318], PG19 [319], LCQMC [320], QQP [321], WinoGender [322],
CB [323], FinRE [324], SanWen [325], AFQMC [311], BQ Corpus [326], CNSS [327], CKBQA 13 [328],
CLUENER [311], Weibo [329], AQuA [330], OntoNotes [331], HeadQA [332], Twitter Dataset [333]
StoryCloze [334], LAMBADA [335], LCSTS [336], AdGen [337], E2E [338], CHID [339], CHID-
PIQA [340], TriviaQA [341], ARC [342], ARC-Easy [342], ARC-Challenge [342], PROST [343], Open-
BookQA [344], WebNLG [345], DogWhistle Insider & Outsider [346]
RACE [347], RACE-Middle [347], RACE-High [347], QuAC [348], StrategyQA [349], Quiz Bowl [350],
cMedQA [351],cMedQA2 [352], MATINF-QA [353]
WinoGrande [354], HellaSwag [355], COPA [356], WSC [357], CSQA [358], SIQA [359], C3 [360],
CLUEWSC2020 [311], CLUEWSC [311], CLUEWSC-FC [312], ReCoRD [361]
SQuAD [362], BoolQ [363], SQUADv2 [364], DROP [365], RTE [366], WebQA [367], CMRC2017 [368],
CMRC2018 [369], CMRC2019 [370], COTE-BD [371], COTE-DP [371], COTE-MFW [371], Mul-
tiRC [372], Natural Questions [373], CNSE [327], DRCD [374], DuReader [375], Dureaderrobust [376],
DuReader-QG [375], SciQ [377], Sogou-log [378], Dureaderrobust-QG [376], QA4MRE [379], KorQuAD
1.0 [380], CAIL2018-Task1 & Task2 [381]
MATH [382], Math23k [383], GSM8K [384], MathQA [385], MGSM [386], MultiArith [387], AS-
Div [388], MAWPS [389], SVAMP [390]
HumanEval [141], DS-1000 [391], MBPP [392], APPS [382], CodeContests [142]
ANLI [393], MNLI-m [394], MNLI-mm [394],QNLI [362], WNLI [357], OCNLI [311], CMNLI [311],
ANLI R1 [393], ANLI R2 [393], ANLI R3 [393], HANS [395], OCNLI-FC [312], LogiQA [396], Strate-
MLQA [397], XNLI [398], PAWS-X [399], XSum [400], XCOPA [401], XWinograd [402], TyDiQA-
TruthfulQA [405], MultiFC [406], Fact Checking on Fever [407]
Biases and Ethics in AI
ETHOS [408], StereoSet [409], BBQ [410], Winobias [411], CrowS-Pairs [412]
RealToxicityPrompts [413], CivilComments toxicity classification [414]
WMT [415], WMT20 [416], WMT20-enzh [416], EPRSTMT [312], CCPM [417]
AminoProbe [148], BioLAMA [148], Chemical Reactions [148], Galaxy Clusters [148], Mineral
Wizard of Wikipedia [418], Empathetic Dialogues [419], DPC-generated [96] dialogues, ConvAI2 [420],
TNEWS-FC [312], YNAT [315], KLUE-TC [315], CSL [311], CSL-FC [312], IFLYTEK [422]
It is a great starting point for models beginning to explore ad-
dataset, ARC-Challenge includes complex, grade-school level
questions that demand reasoning beyond simple retrieval, test-
ing the true comprehension capabilities of models.
RACE [347]: The RACE dataset is a reading comprehension
dataset collected from English examinations in China, which
benchmarks AI models for understanding and answering ques-
tions on long and complex passages, simulating the challenge
RACE-Middle [347]: Another subset of the RACE [347]
dataset, RACE-Middle, contains middle school-level English
exam questions. It offers a slightly less challenging but academ-
ically oriented evaluation of a model’s comprehension skills.
RACE-High [347]: A subset of the RACE [347] dataset,
RACE-High consists of high school-level English exam ques-
tions. It is designed to evaluate the comprehension ability of
models in a more academic and challenging context.
QuAC [348]: This dataset simulates an information-seeking
dialog between students and teachers using hidden Wikipedia
text. It introduces unique challenges not found in machine com-
prehension datasets, making it a valuable resource for advanc-
HellaSwag [355]: A dataset that challenges models to pick the
best ending to a context uses Adversarial Filtering to create a
‘Goldilocks’ zone of complexity, where generated text is absurd
to humans but often misclassified by models.
COPA [401]: This dataset evaluates a model’s progress in
open-domain commonsense causal reasoning. Each question
comprises a premise and two alternatives, and the model must
select the more plausible alternative, testing a model’s ability to
understand and reason about cause and effect.
WSC [357]: The Winograd Schema Challenge (WSC) is a
Page 30:
Table 10: An illustration of training datasets and evaluation tasks employed by pre-trained LLMs. Here, “QA” is question-answering, “Clf” is classification, “NLI”
is natural language inference, “MT” is machine translation, “RC” is reading comprehension, “CR” is commonsense reasoning, “MR” is mathematical reasoning,
Common Crawl, WebText, Books Cor-
54 million public repositories from Github
Chinese text corpora, Baidu Search, Web
text, QA-long, QA-short, Poetry and Cou-
plet Domain-specific data from medical,
law, and financial area Baidu knowledge
graph with more than 50 million facts
Wikipedia, OWT, Books, C4, Pile [301],
Korean blogs, Community sites, News,
KiN Korean Wikipedia, Wikipedia (En-
glish and Japanese), Modu-Corpus: Mes-
senger, News, Spoken and written lan-
Common Crawl, SogouT, Sogou News,
subsets of MassiveWeb Books, C4, News,
GitHub and Wikipedia samples from Mas-
Same as ERNIE 3.0 and ERNIE 3.0 ad-
versarial dataset, ERNIE 3.0 controllable
RoBERTa [299], Pile [301], PushShift.io
arXiv, PMC, Semantic Scholar, Wikipedia,
books, RefSeq Genome, OEIS, LIPID
itories Khan Problems, GSM8K, OneS-
Filtered Webpages, Social media conversa-
tions Wikipedia, Forums, Books, News
Infiniset : Public documents, Dialogs, Ut-
Two snapshots of Common Crawl and
[242], BookCorpus2, NIH ExPorter, Pile,
webpages, books, Wikipedia, news, arti-
cles, source code, social media conversa-
WuDaoCorpora, CLUE, Pile, C4, Python
Web documents, Code, Books, Maths,
Page 31:
Table 11: An illustration of training datasets and evaluation benchmarks used in fine-tuned LLMs. “SNI” is a short of Super-NaturalInsturctions.
reading comprehension task in which a system must resolve
references in a text, often requiring world knowledge and rea-
CSQA [358]: The CommonsenseQA is a question-answering
dataset that requires commonsense knowledge to evaluate the
ability of AI models to understand and answer questions.
BoolQ [363]: A dataset derived from Google search queries,
BoolQ challenges models to answer binary (yes/no) questions.
The questions are naturally occurring and are paired with a
paragraph from a Wikipedia article containing the answer. It
is a test of reading comprehension and reasoning.
SQUADv2 [364]: The Stanford Question Answering Dataset
(SQuAD) [362] is a collection of questions posed by crowd
workers on a set of Wikipedia articles, where the answer to ev-
ery question is a segment of text from the corresponding reading
passage. SQuADv2 combines the original SQuAD1.1 dataset
with over 50,000 unanswerable questions. The aim is to evalu-
ate a model’s ability to understand and answer questions based
on a given context and to determine when a question is unan-
DROP [365]: DROP, or Discrete Reasoning Over the con-
tent of Paragraphs, is designed to test a model’s ability to un-
derstand a wide variety of reading phenomena. It encourages
comprehensive and reliable evaluation of reading comprehen-
The Recognizing Textual Entailment (RTE)
datasets come from a series of annual competitions on textual
entailment, predicting whether a given sentence logically fol-
lows from another and evaluating a model’s understanding of
logical relationships in a text.
WebQA [367]: A dataset for open-domain question answering,
WebQA offers a large collection of web-based question-answer
pairs. It is designed to assess the ability of AI models to under-
stand and answer questions based on web content.
CMRC2018 [369]: This dataset is a test of Chinese language
models’ ability to reason comprehensively and is designed with
a challenging span-extraction format that pushes the boundaries
MATH [382]: This dataset is a platform for evaluating the
mathematical problem-solving abilities of AI models. It con-
tains a diverse set of math problems, ranging from arithmetic
to calculus, and is designed to test the model’s ability to under-
stand and solve complex mathematical problems.
Math23k [383]: This one challenges a model’s ability to un-
derstand and solve mathematical word problems. It contains
23,000 Chinese arithmetic word problems that require models
to perform reasoning and computation based on the problem
GSM8K [384]: A dataset of diverse grade school math word
problems, testing a model’s ability to perform multi-step math-
5.2.9. Problem Solving and Logical Reasoning
ANLI [393]: A large-scale dataset designed to test the robust-
ness of machine learning models in Natural Language Inference
(NLI) is created through an iterative, adversarial process where
humans try to generate examples that models cannot correctly
HumanEval [141]: A dataset for evaluating the problem-
solving ability of AI models, which includes a diverse set of
tasks that require various cognitive abilities, making it a com-
prehensive tool for assessing general intelligence in AI.
StrategyQA [349]: A question-answering dataset that re-
quires reasoning over multiple pieces of evidence to evaluate
the strategic reasoning ability of AI models, pushing the bound-
aries of what machines can understand and answer.
XNLI [398]: A cross-lingual benchmark, XNLI extends the
MultiNLI [429] corpus to 15 languages, including low-resource
ones like Urdu. It tests models on cross-lingual sentence under-
standing, with 112,500 annotated pairs across three categories:
PAWS-X [399]: PAWS-X, or Cross-lingual Paraphrase Adver-
saries from Word Scrambling, is a multilingual version of the
Page 32:
PAWS [430] dataset for paraphrase identification. It includes
examples in seven languages and is designed to evaluate the
performance of cross-lingual paraphrase identification models.
Truthful-QA [405]: A unique benchmark that measures a
language model’s truthfulness when generating answers. The
dataset includes questions across various categories like health,
law, and politics, some designed to test the model against com-
5.2.12. Biases and Ethics in AI
ETHOS [408]: ETHOS is a hate speech detection dataset
built from YouTube and Reddit comments. It is a tool in the
fight against online hate speech, offering binary and multi-label
variants for robust content moderation.
StereoSet [409]: StereoSet is a comprehensive dataset de-
signed to measure and evaluate the presence of stereotypical
biases in language models. It focuses on four key domains:
gender, profession, race, and religion. Contrasting stereotypi-
cal bias against language modeling ability provides a valuable
tool for understanding and mitigating biases in large language
Applying Large Language Models (LLMs) to a variety of
downstream tasks has become a popular trend in both AI-
related research communities and industries, with many emerg-
ing uses being discovered and explored daily. LLMs, which are
capable of understanding and generating human-like text, have
found meaningful applications across a variety of fields. This
section provides an overview of LLM applications in medicine,
education, science, mathematics, law, finance, robotics, and
coding. While each of these domains pose different challenges,
LLMs open up opportunities to make significant contributions
to these domains through their generalizability.
LLMs are being widely considered as
general-purpose tools for a wide variety of tasks [431]. This
is due to their inherent ability to understand, generate, and
manipulate human-like text in a contextually relevant man-
ner. This allows them to perform tasks ranging from simple
language translation and question-answering to more complex
tasks like summarization, text generation, and even program-
ming help [432]. The utility of LLMs is further enhanced by
their ability to adapt to the specific style and tone of the text
they are processing, making the outputs more user-friendly and
context-aware. In everyday applications, LLMs can be used
as personal assistants, helping users draft emails or schedule
appointments [433]; they can also be deployed in customer ser-
vice to handle common questions or applied to generate content
for digital platforms like websites by creating human-like text
based on given prompts [434]. Moreover, LLMs play a cru-
cial role in data analysis, where they can filter large volumes of
text data, summarize key points, and find patterns that would
take humans much longer to identify [435]. Despite their wide-
ranging applications, it is essential to remember that LLMs,
similar to any AI system, are only as good as the data they have
Medicine: The application of LLMs in the field of medicine is
reshaping healthcare delivery and research. For example, LLMs
are increasingly used in clinical decision support systems to
provide physicians with evidence-based treatment recommen-
dations [436, 437, 438]. By analyzing patient data and medical
literature, they can help identify potential diagnoses, suggest
appropriate tests, and recommend optimal treatment strategies.
Moreover, LLMs can also enhance patient interactions with
healthcare systems; e.g., they can be used in chatbot applica-
tions [439, 440, 441] to answer patient queries about symptoms
or medications, schedule appointments, and even provide es-
sential health advice. For medical research, LLMs are used to
extract and filter information from a considerable amount of
medical literature, identify relevant studies, summarize find-
ings, and even predict future research trends [442, 443, 444].
For medical education, LLMs can help create training mate-
rials, generate exam questions, provide detailed explanations
of complex medical topics, and offer personalized feedback to
students [445, 446, 447, 448]. They can also simulate patient
interactions, enabling students to practice and improve their
clinical skills. At a broader level, LLMs can assist in public
health initiatives by analyzing media data to detect disease out-
breaks, monitor public sentiment towards health policies, and
disseminate health information in a clear and understandable
manner [449]. LLMs can be employed to support public health
initiatives, addressing related issues such as data privacy, the
necessity for explainability, and the potential risk of propagat-
Education: The integration of LLMs into the educational sec-
tor offers opportunities to enhance learning experiences, teacher
support, and educational content development. For students, by
analyzing their learning styles, performance, and preferences,
LLMs can provide customized study materials and practice
questions to develop personalized learning experiences [452].
For teachers, LLMs can help to create lesson plans and grade
assignments and generate diverse and inclusive educational
content, significantly saving more time for teaching and student
interaction [453, 454]. In language learning, LLMs serve as
advanced conversational partners capable of simulating conver-
sations in multiple languages, correcting grammar, enhancing
vocabulary, and aiding pronunciation for the needs of fluency
in practice [455]. Furthermore, LLMs improve accessibility
in education by providing support for students with disabili-
ties. They can generate real-time transcriptions for the hear-
ing impaired, offer reading assistance for the visually impaired,
and simplify complex texts for those with learning disabili-
ties [451]. As LLMs continue to evolve, their applications in
education can benefit more students and teachers from different
Science: Similar to medical applications, LLMs can expedite
the research process by quickly analyzing and summarizing sci-
entific literature. By briefing comprehensible and accessible re-
search summaries, LLMs can assist researchers in staying up-
to-date with the latest findings, even in fields outside their area
of expertise [456, 457]. In addition, LLMs can aid scientists
Page 33:
Table 12: Performance comparison of top performing LLMs across various NLU and NLG tasks. Here, “N-Shots” indicate the number of example prompts provided
to the model during the evaluation, representing its capability in few-shot or zero-shot learning settings, “f” represents the fine-tuned version, and “B” represents the
in formulating new hypotheses and research questions since
their ability to process large-scale datasets allows them to un-
veil insights that might not be immediately apparent to human
researchers [458]. Moreover, for scientific writing, LLMs can
help researchers draft documents, suggest improvements, and
ensure adherence to specific formatting guidelines [459, 460].
This not only saves time but also improves the clarity of scien-
tific communication, enabling interdisciplinary teams to work
Maths: In addition to providing mathematical research and
education support, LLMs can assist in solving mathematical
problems by giving step-by-step explanations and guiding users
through complex proofs and calculations. They can help iden-
tify errors in reasoning or computation and suggest corrections,
serving as an invaluable tool for both learning and verification
purposes [461, 462]. LLMs can be employed to check the valid-
ity of mathematical proofs, offering a preliminary filter before
human review. While they are not a substitute for the meticu-
lous work of mathematicians, they can help simplify the process
of proof verification [463, 464]. Moreover, LLMs enhance ac-
cessibility to mathematics by translating complex concepts and
findings into understandable language for non-specialists [465],
where the gap between theoretical mathematics and applied
contexts such as physics, engineering, and economics can be
Law: LLMs can assist with the thematic analysis of legal doc-
uments, including generating initial coding for datasets, iden-
tifying themes, and classifying data according to these themes.
This collaborative effort between legal experts and LLMs has
proved to be effective in analyzing legal texts such as court
opinions on theft, improving both the efficiency and quality of
the research [466]. Additionally, LLMs have been evaluated for
their ability to generate explanations of legal terms, focusing
on improving factual accuracy and relevance by incorporating
sentences from case law. By feeding relevant case law into the
LLM, the augmented models can generate higher-quality expla-
nations with less factually incorrect information [467]. More-
over, LLMs can be trained with specialized domain knowledge
to perform legal reasoning tasks [468] and answer legal ques-
Finance: LLMs like BloombergGPT [151], trained on exten-
sive proprietary financial datasets, exhibit superior performance
on financial tasks. This indicates the value of domain-specific
training in creating LLMs that can more accurately understand
and process industry-specific language and concepts. The intro-
duction of FinGPT [470] as an open-source model offers trans-
parent and accessible resources to develop novel applications
such as robo-advising, algorithmic trading, and low-code so-
lutions, ultimately expanding the capabilities of financial ser-
vices. Both BloombergGPT and FinGPT show the adaptabil-
ity of LLMs to the financial domain, with the former showing
the power of custom datasets and the latter emphasizing a data-
centric approach and low-rank adaptation techniques for cus-
tomization. Moreover, LLMs demonstrate an ability to break
down complex financial tasks into actionable plans, enabling
end-to-end solutions that were previously unfeasible with a sin-
Robotics: In robotics research, LLMs have promising appli-
cations, such as enhancing human-robot interaction [28, 472,
473, 474], task planning [237], motion planning [246], nav-
igation [246, 475], object manipulation [236], personalized
robots [476], etc. LLMs enable robots to understand the en-
vironment effectively and generate plans to complete tasks col-
laboratively [240, 26]. They can facilitate continuous learning
by allowing robots to access and integrate information from a
wide range of sources, helping robots acquire new skills, adapt
to changes, and refine their paths [224, 233, 234].
7. Challenges and Future Directions
LLMs such as GPT-4 and its predecessors have significantly
advanced natural language processing. Nevertheless, they also
bring along a set of challenges. The computational cost, ad-
versarial robustness, and interpretability are among the tech-
nical challenges that are intrinsic to these models.
more, as these models are scaled up to handle more complex
Page 34:
tasks or to operate in more complex or dynamic environments,
new challenges in scalability, privacy, and real-time processing
emerge. On the frontier of foundational research, integrating
multi-modality and the effectiveness of transfer learning are be-
ing keenly explored. Additionally, the continuous learning as-
pect of these models, which aims to have models that can adapt
to new information over time, presents a fresh set of challenges.
These challenges not only underscore the technical intricacies
involved but also highlight the broader impact and the future
trajectory of LLMs in real-world applications. The following
sections delve into these challenges, shedding light on the on-
going and potential efforts to address them.
Computational Cost: Training LLMs require extensive compu-
tational resources, which increases production costs and raises
environmental concerns due to substantial energy consump-
tion during large-scale training. Improved performance occurs
as computational resources increase, but the rate of improve-
ment gradually decreases when both the model and dataset
size remain fixed, following the power law of diminishing re-
Bias and Fairness: LLMs can inherit and amplify societal bi-
ases in their training data. These biases can manifest in the
model’s outputs, leading to potential ethical and fairness is-
Overfitting: Although LLMs possess substantial learning ca-
pabilities, they are susceptible to overfitting noisy and peculiar
patterns within their extensive training data. Consequently, this
may cause them to generate illogical responses [479]. The de-
bate about Memorization vs. Generalization in LLMs is about
finding the right balance. Memorization allows the model to
remember specific details from its training data, ensuring it can
provide accurate answers to precise questions. However, gen-
eralization enables the model to make inferences and produce
responses for inputs it has not seen before, which is essential
for handling various real-world tasks. Striking the right bal-
ance is the challenge: too much memorization can lead to over-
fitting, making the model inflexible and struggling with new
Economic and Research Inequality: The high cost of train-
ing and deploying LLMs may make their development concen-
trated within well-funded organizations, potentially worsening
economic and research inequalities in AI [481].
Reasoning and Planning: Some reasoning and planning tasks,
even as seemingly simple as common-sense planning, which
humans find easy, remain well beyond the current capabilities
of LLMs evaluated using an assessment framework. This is not
entirely unexpected, considering that LLMs primarily generate
text completions based on likelihood and offer no solid guaran-
tees in terms of reasoning abilities [482].
Hallucinations: LLMs exhibit “hallucinations", where they
generate responses that, while sounding plausible, are incorrect
or do not align with the provided information [483]. Hallucina-
tions can be categorized into three categories.
• Input-conflicting hallucination, wherein LLMs produce
content that diverges from the input given by users.
• Context-conflicting hallucination, where LLMs generate
content that contradicts information they have generated
• Fact-conflicting hallucination involves LLM’s generation
of content that does not align with established world
Prompt Engineering: Prompts serve as inputs to LLMs, and
their syntax and semantics play a crucial role in determining
the model’s output. The prompt variations, sometimes counter-
intuitive to humans, can result in significant changes in model
output and are addressed through prompt engineering, which
involves designing natural language queries to guide LLMs
Limited Knowledge: Information acquired during pretraining
is limited and may become obsolete after some time.
training the model using updated data is costly. To generate
factually accurate responses, people use a retrieval augmen-
However, pre-trained models are not
trained with retrieval augmentation generation (RAG) [6, 21];
hence, adapting the training pipeline is necessary [193, 25].
Safety and Controllability: Using LLMs comes with the risk
of generating harmful, misleading, or inappropriate content,
whether by accident or when given specific prompts. Ensuring
these models are safely utilized is a significant concern [485].
Security and Privacy: LLMs are prone to leaking personal
information and generating false, unethical, misaligned re-
sponses. Researchers have explored various security attacks,
i.e., backdoor attacks, jailbreaking, prompt injection, and data
poisoning, that lead to breaking LLMs security.
developing better defense mechanisms is essential to ensure
LLMs are safe, reliable, and trustworthy for complex AI
Multi-modal learning, where LLMs are
trained on diverse data like text, images, and videos, aims to
create models with richer understanding but faces challenges
in data alignment, fusion strategies, and higher computational
LLMs are often pre-trained on
large datasets and then fine-tuned on domain-specific data,
However, they face issues like
domain adaptation and catastrophic forgetting, which hinder
the retention of original knowledge when learning new tasks.
have shown great capabilities in various tasks but are vul-
nerable to adversarial attacks, where slight, deliberate input
BERT, adversarial fine-tuning can enhance robustness, al-
though it sometimes compromises generalization [487].
LLMs integrate more into complex systems, examining their
security properties becomes crucial, given the emerging field
of adversarial attacks on LLMs within trustworthy ML [488].
This vulnerability is notable in safety-critical domains, ne-
cessitating robust adversarial evaluation tools to ensure LLM
Interpretability and Explainability: The “black-box” nature
of LLMs poses challenges in understanding their decision-
making, which is crucial for broader acceptance and trust,
Page 35:
capabilities, the lack of insight into their operation limits their
effectiveness and trustworthiness [490, 491]. Efforts are being
made to make LLMs more explainable to promote user trust
and to ensure responsible AI usage. Understanding the logic
behind LLMs’ responses is essential for fostering trust and
ensuring they align with human values and legal standards.
Privacy concerns in Large Language
Models (LLMs) have escalated with their growth in complexity
and size, particularly around data sharing and potential misuse.
There is a risk of malicious content creation, filter bypass,
and data privacy issues, especially in e-commerce, where
protecting customer privacy is crucial. If models are trained
on private data, additional concerns arise if such models are
made publicly available. LLMs tend to memorize phrases from
their training sets, which an adversary could exploit to extract
sensitive data, posing a threat to personal privacy [492, 493].
Real-Time Processing: Real-time processing in Large Lan-
guage Models (LLMs) is pivotal for various applications,
especially with the rising popularity of mobile AI applications
and concerns regarding information security and privacy.
However, LLMs often have hundreds of layers and millions
of parameters, which impede real-time processing due to the
high computational demands and limited weight storage on
hardware platforms, particularly in edge computing environ-
While certain efforts like MobileBERT aim
to reduce memory requirements, they still face substantial
execution overhead due to the large number of model layers,
leading to high inference latency.
shown considerable progress in understanding and generating
text, yet they often struggle with preserving context and
handling long-term dependencies, particularly in complex,
multi-turn conversations or long documents. This limitation
can lead to incoherent or irrelevant responses.
Hardware Acceleration: The growth of LLMs presents signif-
icant hardware challenges due to the increasing computational
and memory demands associated with training and deploying
these models. GPUs have played a crucial role in meeting the
hardware requirements for training LLMs, with the networking
industry also evolving to optimize hardware for training
workloads. However, the growing size of LLMs, which has
been outpacing hardware progress, makes model inference in-
creasingly costly. Model quantization is a promising approach
to bridge the widening gap between LLM size and hardware
like GPUs or TPUs can significantly reduce the computational
cost, making real-time applications more feasible, they may not
fully resolve all limitations, necessitating further advancements
Regulatory and Ethical Frameworks: The rapid advancements
in artificial intelligence have given rise to sophisticated Large
Language Models (LLMs) like OpenAI’s GPT-4 [157] and
Google’s Bard. These developments underscore the imperative
for regulatory oversight to manage the ethical and social
challenges accompanying LLMs’ widespread use [496]. For
instance, LLMs can generate content that can be used posi-
tively or negatively, emphasizing the need for proactive ethical
frameworks and policy measures to guide their responsible
use and assign accountability for their outputs [497]. Auditing
is identified as a promising governance mechanism to ensure
that AI systems, including LLMs, are designed and deployed
ethically, legally, and technically robust [498].
This article has comprehensively reviewed the develop-
It contributes to summarizing significant
findings of LLMs in the existing literature and provides a
detailed analysis of the design aspects, including architec-
tures, datasets, and training pipelines.
architectural components and training strategies employed by
These aspects are presented as summaries
and discussions throughout the article.
discussed the performance differences of LLMs in zero-shot
and few-shot settings, explored the impact of fine-tuning, and
compared supervised and generalized models and encoder vs.
decoder vs. encoder-decoder architectures. A comprehensive
review of multi-modal LLMs, retrieval augmented LLMs,
LLMs-powered agents, efficient LLMs, datasets, evaluation,
applications, and challenges is also provided. This article is
anticipated to serve as a valuable resource for researchers,
offering insights into the recent advancements in LLMs and
providing fundamental concepts and details to develop better
The author/s would like to acknowl-
edge the support received from Saudi Data and AI Authority
(SDAIA) and King Fahd University of Petroleum and Miner-
als (KFUPM) under SDAIA-KFUPM Joint Research Center for
Artificial Intelligence Grant No. JRC-AI-RFP-11.
